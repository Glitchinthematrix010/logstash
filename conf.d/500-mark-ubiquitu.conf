filter {
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] =~ /\(\"U7LT,[0-9a-f]+,v[0-9.]+\"\)/{
    mutate {
      add_field => { "application" => "Ubiquiti" }
    }
    if [message] =~ /^hostapd: / {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: (sta_stats|associated|disassociated)$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: associated \(aid \d+\)$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: authenticated$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: deauthenticated due to (local deauth request|inactivity \(timer DEAUTH/REMOVE\))$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: did not acknowledge authentication response$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: disassociated due to inactivity$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: disconnected due to excessive missing ACKs$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} RADIUS: starting accounting session [0-9A-F-]+$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} WPA: (pairwise|group) key handshake completed \(RSN\)$",
          "^hostapd: %{INTF_DST}: STA %{MAC_SRC} WPA: received EAPOL-Key with invalid MIC$",
          "^hostapd: Child connection from %{IP_SRC}:%{PORT_SRC}$",
          "^hostapd: \[\s*\d+\.\d+\] \[%{INTF_DST}\] FWLOG: \[\d+\] WHAL_ERROR_RESET_CHANNF1 \(  \)$",
          "^hostapd: \[\s*\d+\.\d+\] ar9300_handle_radar_bb_panic: BB status=0x04008009 rifs=1 - disable$",
          "^hostapd: process '/bin/stamgr -i 1 ' \(pid \d+\) exited\. Scheduling for restart\.$",
          "^hostapd: reloading /etc/inittab$",
          "^hostapd: starting pid \d+, tty '/dev/null': '/bin/stamgr -i 1 '$"
        ] }
      }
    }
    if [message] =~ /^kernel: / {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^kernel: \[\s*\d+\.\d+\] %{INTF_DST}: no IPv6 routers present$",
          "^kernel: \[\s*\d+\.\d+\] Atheros AR8216/AR8236/AR8316 ag71xx-mdio\.0:00: Port %{BASE10NUM} is (up|down)$",
          "^kernel: \[\s*\d+\.\d+\] \[%{INTF_DST}\] FWLOG: \[\d+\] vap-1 AP PS: AID=%{BASE10NUM} detected out-of-sync now=%{BASE10NUM} tx_waiting=%{BASE10NUM} txq_depth=%{BASE10NUM}$",
          "^kernel: \[\s*\d+\.\d+\] \[%{INTF_DST}\]( \[%INTERFACENAME}\])? FWLOG: \[\d+\] RATE: ChainMask [13], phymode 10444(84|86|90), ni_flags 0x0[06]22[13b]006, vht_mcs_set 0x(0000|fffa), ht_mcs_set 0xffffff, legacy_rate_set 0x%{BASE16NUM}$", 
          "^kernel: \[\s*\d+\.\d+\] \[%{INTF_DST}\]( \[%{INTERFACENAME}\])? FWLOG: \[\d+\] WAL_DBGID_",
          "^kernel: \[\s*\d+\.\d+\] ar9300_abort_tx_dma\[\d+\]: ar9300_stop_dma_receive failed$",
          "^kernel: \[\s*\d+\.\d+\] ar9300_handle_radar_bb_panic: BB status=0x04008009 rifs=0 - disable$",
          "^kernel: \[\s*\d+\.\d+\] ar9300_reset\[\d+\]: ar9300_stop_dma_receive failed$",
          "^kernel: \[\s*\d+\.\d+\] ath_tx_sched_aggr: Recovering from error condition: Flushing TID queue until head\s+is within the window$",
          "^kernel: \[\s*\d+\.\d+\] ath_tx_sched_aggr: TID\[\d+\] seq_start:\d+ seq_next:\d+ Head:\d+ Tail:\d+ BAW size:\d+ seqno:\d+$",
          "^kernel: \[\s*\d+\.\d+\] wmi_unified_event_rx : no registered event handler : event id 0x901b",
          "^kernel: \[\s*\d+\.\d+\]\s*$",
          "^kernel: \[\s*\d+\.\d+\]\s+Could not find the peer\s*$",
          "^kernel: \[\s*\d+\.\d+\]\s+Unable to process TX info\s*$",
          "^kernel: \[\s*\d+\.\d+\]\s+ieee80211_ioctl_kickmac\[%{BASE10NUM}\]"
        ] }
      }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Benign" ]
      match => { "message" => [
        "^ace_reporter\.reporter_set_managed\(\): \[STATE\] enter MANAGED$",
        "^stamgr\.kick_sta\(\): kick-sta-on %{MAC_SRC} %{INTF_DST} \(reason:3\)$"
      ] }
    }
    if [message] =~ /^syslog: / {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^syslog: Premature exit: Terminated by signal$",
          "^syslog: ace_reporter\.reporter_connected\(\): connect\(%{URI}\) failed with errors: %{DATA}$",
          "^syslog: ace_reporter\.reporter_fail\(\): Not Adopted \(%{URI}\)$",
          "^syslog: ace_reporter\.reporter_fail\(\): Unreachable \(%{URI}\)$",
          "^syslog: ace_reporter\.reporter_fail\(\): \[STATE\] entering SELFRUN!!!!$",
          "^syslog: ace_reporter\.reporter_fail\(\): inform failed #%{BASE10NUM} \(last inform: %{BASE10NUM} seconds ago\), rc=3$",
          "^syslog: ace_reporter\.reporter_fail\(\): initial contact failed #\d+, url=%{URI}, rc=\d+$",
          "^syslog: ace_reporter\.reporter_next_inform_url\(\): next inform url\[\d+\]=%{URI}$",
          "^syslog: mca-ctrl.do_monitor\(\): \[event\] fatal radio error detected, resetting$",
          "^syslog: wevent.ubnt_custom_event\(\): EVENT_STA_(JOIN|LEAVE) %{INTF_DST}: %{MAC_SRC} / \d+$",
          "^syslog: ubntevent.update\(\): fatal chip error detected on wifi1$"
        ] }
      }
    }
  }
}
