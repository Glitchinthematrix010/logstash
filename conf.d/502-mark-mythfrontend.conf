filter { 
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] =~ /mythfrontend/ { 
    mutate {
      rename => { "message" => "msg-orig" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_field => { "application" => "mythtv" }
      match => { "msg-orig" => [
        "^%{MYTHTIMESTAMP} %{MYTHLEVEL:[mythtv][level]}  %{GREEDYDATA:message}$"
      ] }
    }
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      add_tag => [ "Known Message", "Benign" ] 
      tag_on_failure => [ ] 
      match => { "message" => [ 
        "^ - $",
        "^AFD: Audio stream changed$",
        "^AFD: No DTS Seeking Hack!$",
        "^AFD: Number of audio channels changed from %{INT} to %{INT}$",
        "^AFD: Opened codec %{BASE16NUM}, id\(%{DATA}\) type\(%{DATA}\)$",
        "^AFD: codec %{DATA:[mythtv]recording][codec]} has %{POSINT} channels$",
        "^AOBase: Opening audio device '%{DATA:[mythtv][playback][soundcard]}' ch %{POSINT}\(%{POSINT}\) sr %{POSINT:[mythtv]playback][samplerate]} sf signed %{POSINT:[mythtv][playback][soundbits]} bit reenc %{BOOLEAN:[mythtv][playback][reencode]}$",
        "^Added logging to the console$",
        "^Adding : :%{FILENAME_DST} : %{BASE16NUM}$",
        "^AirPlay: Created airplay objects.$",
        "^Assumed character encoding: [[:lower]]{2}_[[::upper:]]{2}(\.utf8)?$",
        "^AudioPlayer: Enabling Audio$",
        "^Backing up database with script: '/usr/share/mythtv/mythconverg_backup\.pl'$",
        "^Binding to UDP %{IP_DST}:%{PORT_DST}$",
        "^Binding to UDP \[%{IPV6}(\%%{INTF_DST})?\]:%{PORT_DST}$",
        "^Bonjour: Service registration complete: name '%{BASE16NUM}@MythTV on %{HOST_SRC}' type '_raop._tcp.' domain: 'local.'$",
        "^Bonjour: Service registration complete: name 'MythTV on %{HOST_SRC}' type '_airplay._tcp.' domain: 'local.'$",
        "^Bonjour: Service registration complete: name 'Mythfrontend on %{HOST_SRC}' type '_mythfrontend._tcp.' domain: 'local.'$",
        "^CECAdapter: base_dev= auto\.$",
        "^CECAdapter: using HDMI port %{POSINT}\. $",
        "^CECAdapter: using base device %{POSINT}\. $",
        "^Checking for theme updates every hour$",
        "^Couldn't upgrade music database schema, exiting\.$",
        "^Current Myth(Music|TV) Schema Version \((Music)?DBSchemaVer\): %{POSINT}$",
        "^Current locale [[:lower:]]{2}_[[:upper:]]{2}$",
        "^Desktop video mode: %{POSINT}x%{POSINT} %{BASE10NUM} Hz$",
        "^Empty LocalHostName.$",
        "^Enabled verbose msgs:\s+general$",
        "^Enabling buffering optimisations for low bitrate stream\.$",
        "^Entering standby mode after 90 minutes of inactivity$",
        "^Found mainmenu.xml for theme '%{DATA:[mythtv][frontend][theme]}'$",
        "^Handling Segmentation fault$",
        "^LIRC: Successfully initialized '/var/run/lirc/lircd' using '%{UNIXPATH:[files][src][filename]}' config $",
        "^Leaving standby mode$",
        "^Listening on TCP %{IP_DST}:%{PORT_DST}$",
        "^Listening on TCP \[%{IPV6}(\%%{INTF_DST})?\]:(5[01]00|6547)$",
        "^Loading [[:lower:]]{2}_[[:lower:]]{2} translation for module myth(archive|browser|frontend|gallery|game|music|netvision|news|weather|zoneminder)$",
        "^Metadata Image Download: http://www.thetvdb.com/banners/episodes/%{INT}/%{INT}.jpg -> %{MYTHSHOTURL}$",
        "^MythCoreContext: Connecting to backend server: %{IP_DST}:%{PORT_DST} \(try %{POSINT} of %{POSINT}\)$",
        "^MythCoreContext::CheckProtoVersion\(\): Using protocol version %{INT} XmasGift$",
        "^MythCoreContext::ConnectCommandSocket\(\): Connecting to backend server: %{IP_DST}:%{PORT_DST} \(try %{INT} of %{INT}\)$",
        "^MythMusic database schema upgrade complete\.$",
        "^MythPainter: %{POSINT} images not yet de-allocated\.$",
        "^MythUIWebBrowser: Loading css from - file://%{PATH}/mythbrowser\.css$",
        "^MythUIWebBrowser: enabling plugins$",
        "^New Client: \(#1\)$",
        "^New DB connection, total: %{POSINT}$",
        "^No joystick configuration found, not enabling joystick control$",
        "^PlaybackBox: SortedList is Empty$",
        "^PlaybackBoxHelper: CHECK_AVAILABILITY 'GetPlaybackURL/UNABLE/TO/FIND/LOCAL/FILE/ON/%{HOST_SRC}/%{POSINT:[mythtv][recording][chanid]}_%{POSINT}\.mpg' file not found$",
        "^Player\(%{DATA}\): Forcing decode extra audio option on \(Video method requires it\)\.$",
        "^Player\(%{DATA}\): Video timing method: USleep with busy wait$",
        "^Player\(%{INT}\): LiveTV forcing JumpTo %{INT}$",
        "^Player\(%{INT}\): {%INT}{TIMEUNITS} for decoder to pause$",
        "^Player\(%{MYTHPLAYERID}\): Forcing decode extra audio option on \(Video method requires it\)\.$",
        "^Player\(%{MYTHPLAYERID}\): Video timing method: USleep with busy wait$",
        "^Player\(%{MYTHPLAYERID}\): Waited %{INT:[mythtv][playback][buffer_delay]}%{TIMEUNITS} for video buffers( %{MYTHBUFFERS})?$",
        "^Preview: Output path '%{UNIXPATH:[files][dst][filename]' is not writeable$",
        "^Pulse: PulseAudio (resume|suspend) OK$",
        "^Qt version: compile: [0-9.]+, runtime: [0-9.]+ $",
        "^RAOP Device: Created RAOP device objects.$",
        "^RAOP Device: Listening for connections on port %{PORT_DST}$",
        "^Reading locale defaults from /usr/share/mythtv//locales/[[:lower:]]{2}_[[:lower:]]{2}\.xml$",
        "^Registering (Internal|WebBrowser) as a media playback plugin.$",
        "^Registering HouseKeeperTask 'HardwareProfiler'\.$",
        "^Registering service %{BASE16NUM}@%{DATA} on %{IP_SRC}\._raop\._tcp port 5000 TXT %{DATA}$",
        "^Result Found, Season %{POSINT} Episode %{POSINT}$",
        "^Resuming idle timer$",
        "^Returning Metadata Results: %{MYTHTITLE} %{POSINT} %{POSINT}$",
        "^RingBuf\(%{FILENAME_DST}\): Taking too long to be allowed to read\.\.$",
        "^Running Grabber:%{UNIXPATH:[mythtv][grabber][filename]} %{DATA:[mythtv][grabber][params]}$",
        "^ScreenSaverDBus: Could not connect to dbus: The name %{DATA} was not provided by any \.service files$",
        "^ScreenSaverDBus: Created for DBus service: %{DATA}$",
        "^ScreenSaverDBus: Screensaver (un)?inhibited via %{DATA}$",
        "^ScreenSaverDBus: Successfully inhibited screensaver via %{DATA}(\. cookie %{POSINT}. nom nom)?$",
        "^ScreenSaverX11Private: DPMS ((D|R)eactivated 1|is active\.)$",
        "^Setting Log Level to LOG_INFO$",
        "^Setting QT default locale to [[:lower:]]{2}_[[:upper:]]{2}$",
        "^Setup (Aborted|Bus error|Floating point exception|Hangup|Illegal instruction|Interrupt|Real-time signal 0|Segmentation fault|Terminated|User defined signal (1|2)) handler$",
        "^Starting HouseKeeper\.$",
        "^Starting IO manager \((read|write)\)$",
        "^Starting process (manager|signal handler)$",
        "^Suspending idle timer$",
        "^TV: ASK_RECORDING %{MYTHCARDID} %{MYTHCHANNEL} 0 0 hasrec: 0 haslater: 0$",
        "^TV: Attempting to change from %{MYTHSTATUS} to %{WORD}$",
        "^TV: Changing from %{WORD} to %{MYTHSTATUS}$",
        "^TV: Created (player|TvPlayWindow)\.$",
        "^TV: Creating TV object$",
        "^TV: E(nter|xit)ing main playback loop\.$",
        "^TV: Main UI disabled\.$",
        "^TV: Main UI disabled\.$",
        "^TV::HandleStateChange\(\): Attempting to change from %{MYTHFESTATE} to %{MYTHFESTATE}$",
        "^TV::HandleStateChange\(\): Changing from %{MYTHFESTATE} to %{MYTHFESTATE}$",
        "^TV::HandleStateChange\(\): ITVRestart done$",
        "^TV::HandleStateChange\(\): Main UI disabled\.$",
        "^TV::HandleStateChange\(\): State is LiveTV & mctx == ctx$",
        "^TV::HandleStateChange\(\): Update(LCD|OSDInput) done$",
        "^TV::HandleStateChange\(\): playbackURL\(%{FILENAME_SRC}\) inputtype\(DUMMY\)$",
        "^TV::Init\(\): Created TvPlayWindow\.$",
        "^TV::StartPlayer\(\): Created player\.$",
        "^TV::StartTV\(\): E(nter|xit)ing main playback loop\.$",
        "^TV::TV\(\): Creating TV object$",
        "^This application expects to be running a locale that specifies a UTF-8 codeset, and many features may behave improperly with your current language settings\. Please set the LC_ALL or LC_CTYPE, and LANG variable\(s\) in the environment in which this program is executed to include a UTF-8 codeset \(such as 'en_US\.UTF-8'\)\.$",
        "^UDPListener: Enabling$",
        "^UI Screen Resolution: %{INT} x %{INT}$",
        "^Updating keybinding description\.\.\.$",
        "^Upgrading to Myth(Browser|Music) schema version %{INT}$",
        "^Using (Frameless|Full Screen) Window$",
        "^Using configuration directory = %{PATH}/\.mythtv$",
        "^Using configuration directory = %{UNIXPATH:[files][src][filename]} $",
        "^Using localhost value of %{HOST_SRC}$",
        "^Using protocol version %{POSINT}$",
        "^Using runtime prefix = /usr$",
        "^Using the Qt painter$",
        "^VDPAU Painter: Clearing VDPAU painter cache.$",
        "^VDPAU: %{INT} of %{INT} video surfaces still need to be reset$",
        "^VDPAU: Added %{POSINT} output surfaces \(total %{POSINT}, max %{POSINT}\)$",
        "^VDPAU: Attempting to re-create VDPAU resources\.$",
        "^VDPAU: Attempting to reset %{INT} video surfaces owned by this thread %{BASE10NUM}$",
        "^VDPAU: Created %{POSINT} output surfaces\.$",
        "^VDPAU: Created VDPAU render device %{INT}x%{INT}$",
        "^VDPAU: Display pre-empted\.$",
        "^VDPAU: Failed to re-create VDPAU resources\.$",
        "^VDPAU: Information NVIDIA VDPAU Driver Shared Library %{BASE10NUM} %{DATESTAMP_OTHER}$",
        "^VDPAU: Orphaned bitmap surfaces\.$",
        "^VDPAU: Orphaned decoders\.$",
        "^VDPAU: Orphaned (output|video) surfaces\.$",
        "^VDPAU: Orphaned video mixers\.$",
        "^VDPAU: Re-created ((%{INT} video|bitmap|output) surfaces|decoders|video mixers)\.$",
        "^VDPAU: Version %{INT}$",
        "^VidOutVDPAU: Added %{POSINT} new buffers. New buffer size %{POSINT} \(%{POSINT} decode and %{POSINT} process\)$",
        "^loaded the Generic plugin$"
      ] } 
    } 
    if "Benign" not in [tags] {
      grok { 
        patterns_dir => [ "/etc/logstash/patterns.d/" ] 
        tag_on_failure => [ ] 
        add_tag => [ "Known Message", "Error" ] 
        match => { "message" => [ 
          "^ALSA: Unable to open audio mixer\. Volume control disabled$",
          "^ALSA: no playback control PCM found on mixer device default$",
          "^ALSA: WriteAudio: resume failed$",
          "^CECAdapter: Failed to load libcec\. $",
          "^Connection to master server timed out\.$",
          "^DBUtil: Error backing up database: 'mysqldump --defaults-extra-file='/tmp/mythtv_db_backup_conf_%{DATA}' --host='localhost' --port='3306' --user='mythtv' --add-drop-table --add-locks --allow-keywords --complete-insert --extended-insert --lock-tables --no-create-db --quick 'mythconverg' > '%{PATH}/mythconverg-%{INT}-%{INT}\.sql' 2>/dev/null' \(1\)$",
          "^DBUtil: Error backing up database: /usr/share/mythtv/mythconverg_backup\.pl  /tmp/mythtv_db_backup_conf_%{DATA} \(255\)$",
          "^Either the server is down or the master server settings$",
          "^Error Loading en_us translation for module myth(browser|game|news|weather)$",
          "^Event socket closed\.  No connection to the backend\.$",
          "^FileRingBuf\(%{DATA}\): RingBuffer::RingBuffer\(\): Failed to open remote file \(%{MYTHVIDURL}\)$",
          "^JoystickMenuThread: Joystick disabled - Failed to read %{UNIXPATH:[files][src][filename]}$",
          "^LIRC: Failed to connect to Unix socket '/var/run/lirc/lircd'$",
          "^MythSocket\(%{BASE16NUM}:%{INT}\): Failed to connect to \(%{IP_DST}:6543\) Connection refused$",
          "^MythSocket\(%{BASE16NUM}:%{INT}\): ReadStringList: Connection died\.$",
          "^PlaybackBoxHelper: CHECK_AVAILABILITY '%{DATA:[files][src][filename]}' file not found$",
          "^Preview: %{INT}_%{TIMESTAMP_ISO8601}:$",
          "^Preview: Output path '%{FILENAME_DST}' is not writeable$",
          "^ProgramInfo\(%{DATA:[files][src][filename]}\): GetPlaybackURL: '%{DATA}' should be local, but it can not be found\.$",
          "^Protocol version check failure\.$",
          "^QObject::~QObject: Timers cannot be stopped from another thread$",
          "^RemoteFile::openSocket\(file data socket\): Failed to open socket, error was filetransfer_filename_empty$",
          "^ScreenSaverDBus: Failed to disable screensaver: Type of message, '\(ss\)', does not match expected type '\(susu\)'$",
          "^The response to MYTH_PROTO_VERSION was empty\.$",
          "^This happens when the backend is too busy to respond,$",
          "^Unable to initialize plugin '%{WORD:[mythtv][plugin]}'\.$",
          "^VDPAU: Error at mythrender_vdpau\.cpp:%{INT} \(#%{INT}, %{DATA}\)$",
          "^VDPAU: Failed to create bitmap surface\.$",
          "^VidOutVDPAU: IsErrored\(\) in Show$",
          "^\$RemoteFile::openSocket\(file data socket\): Failed to open socket, error was filetransfer_filename_empty$",
          "^decoding error$",
          "^eno: Unknown error %{INT} \(%{INT}\)$",
          "^in mythtv-settings does not contain the proper IP address$",
          "^libcec.so.[0-9]+\.[0-9]+: cannot open shared object file: No such file or directory$",
          "^or has deadlocked due to bugs or hardware failure\.$"
        ] }
      }
    }
    if "Known Message" not in [tags] {
      mutate {
        remove_field => [ "message" ]
      }
      mutate {
        rename => { "msg-orig" => "message" }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^QObject::~QObject: Timers cannot be stopped from another thread$",
          "^eno: Unknown error %{INT} \(%{INT}\)$"
        ] }
      }
    } else {
      mutate {
        remove_field => [ "msg-orig" ]
      }
    }
  }
}
