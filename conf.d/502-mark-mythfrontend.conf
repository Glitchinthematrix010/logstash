filter { 
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] =~ /mythfrontend/ { 
    mutate {
      rename => { "message" => "[@metadata][tmp]" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ ]
      add_field => { "application" => "mythtv" }
      match => { "[@metadata][tmp]" => [
        "^%{MYTHTIMESTAMP} %{MYTHLEVEL:[mythtv][level]}  %{GREEDYDATA:message}$"
      ] }
    }

    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      add_tag => [ "Benign", "Known Message" ] 
      tag_on_failure => [ ] 
      match => { "message" => [ 
        "^AFD: No DTS Seeking Hack!$",
        "^AFD: No DTS Seeking Hack!$",
        "^AFD: Opened codec %{BASE16NUM}, id\(%{DATA}\) type\(%{DATA}\)$",
        "^AFD: codec %{DATA:[mythtv]recording][codec]} has %{POSINT} channels$",
        "^ALSA: Unable to open audio mixer\. Volume control disabled$",
        "^ALSA: no playback control PCM found on mixer device default$",
        "^AOBase: Opening audio device '%{DATA:[mythtv][playback][soundcard]}' ch %{POSINT}\(%{POSINT}\) sr %{POSINT:[mythtv]playback][samplerate]} sf signed %{POSINT:[mythtv][playback][soundbits]} bit reenc %{BOOLEAN:[mythtv][playback][reencode]}$",
        "^Added logging to the console$",
        "^Adding : :%{FILENAME_DST} : %{BASE16NUM}$",
        "^AirPlay: Created airplay objects.$",
        "^Assumed character encoding: [[:lower]]{2}_[[::upper:]]{2}(\.utf8)?$",
        "^AudioPlayer: Enabling Audio$",
        "^Binding to UDP %{IP_DST}:%{PORT_DST}$",
        "^Bonjour: Service registration complete: name '%{BASE16NUM}@MythTV on %{HOST_SRC}' type '_raop._tcp.' domain: 'local.'$",
        "^Bonjour: Service registration complete: name 'MythTV on %{HOST_SRC}' type '_airplay._tcp.' domain: 'local.'$",
        "^Bonjour: Service registration complete: name 'Mythfrontend on %{HOST_SRC}' type '_mythfrontend._tcp.' domain: 'local.'$",
        "^CECAdapter: Failed to load libcec\. $",
        "^CECAdapter: base_dev= auto\.$",
        "^CECAdapter: using HDMI port %{POSINT}\. $",
        "^CECAdapter: using base device %{POSINT}\. $",
        "^Checking for theme updates every hour$",
        "^Checking for theme updates every hour$",
        "^Current Myth(Music|TV) Schema Version \((Music)?DBSchemaVer\): %{POSINT}$",
        "^Current locale [[:lower:]]{2}_[[:upper:]]{2}$",
        "^Desktop video mode: %{POSINT}x%{POSINT} %{BASE10NUM} Hz$",
        "^Empty LocalHostName.$",
        "^Enabled verbose msgs: general$",
        "^Entering standby mode after 90 minutes of inactivity$",
        "^Found mainmenu.xml for theme '%{DATA:[mythtv][frontend][theme]}'$",
        "^Handling Segmentation fault$",
        "^JoystickMenuThread: Joystick disabled - Failed to read %{UNIXPATH:[files][src][filename]}$",
        "^LIRC: Successfully initialized '/var/run/lirc/lircd' using '%{UNIXPATH:[files][src][filename]}' config $",
        "^Leaving standby mode$",
        "^Listening on TCP %{IP_DST}:%{PORT_DST}$",
        "^Loading [[:lower:]]{2}_[[:lower:]]{2} translation for module myth(archive|browser|frontend|gallery|game|music|netvision|news|weather|zoneminder)$",
        "^Metadata Image Download: http://www.thetvdb.com/banners/episodes/%{INT}/%{INT}.jpg -> %{MYTHSHOTURL}$",
        "^MythCoreContext: Connecting to backend server: %{IP_DST}:%{PORT_DST} \(try %{POSINT} of %{POSINT}\)$",
        "^MythPainter: %{POSINT} images not yet de-allocated\.$",
        "^MythUIWebBrowser: Loading css from - %{URI}mythbrowser\.css $",
        "^MythUIWebBrowser: enabling plugins$",
        "^New Client: \(#1\)$",
        "^New DB connection, total: %{POSINT}$",
        "^PlaybackBoxHelper: CHECK_AVAILABILITY 'GetPlaybackURL/UNABLE/TO/FIND/LOCAL/FILE/ON/%{HOST_SRC}/%{POSINT:[mythtv][recording][chanid]}_%{POSINT}\.mpg' file not found$",
        "^Player\(%{MYTHPLAYERID}\): Forcing decode extra audio option on \(Video method requires it\)\.$",
        "^Player\(%{MYTHPLAYERID}\): Video timing method: USleep with busy wait$",
        "^Player\(%{MYTHPLAYERID}\): Waited %{INT:[mythtv][playback][buffer_delay]}ms for video buffers( %{MYTHBUFFERS})?$",
        "^Preview: Output path '%{UNIXPATH:[files][dst][filename]' is not writeable$",
        "^ProgramInfo\(%{POSINT:[mythtv][recording][chanid]}_%{POSINT}\.mpg\): GetPlaybackURL: '%{POSINT:[mythtv][recording][chanid]}_%{POSINT}\.mpg' should be local, but it can not be found\.$",
        "^Pulse: PulseAudio (resume|suspend) OK$",
        "^Qt version: compile: [0-9.]+, runtime: [0-9.]+ $",
        "^RAOP Device: Created RAOP device objects.$",
        "^RAOP Device: Listening for connections on port %{PORT_DST}$",
        "^Reading locale defaults from /usr/share/mythtv//locales/[[:lower:]]{2}_[[:lower:]]{2}\.xml$",
        "^Registering (Internal|WebBrowser) as a media playback plugin.$",
        "^Registering HouseKeeperTask 'HardwareProfiler'\.$",
        "^x$RemoteFile::openSocket\(file data socket\): Failed to open socket, error was filetransfer_filename_empty$",
        "^Result Found, Season %{POSINT} Episode %{POSINT}$",
        "^Resuming idle timer$",
        "^Returning Metadata Results: %{MYTHTITLE} %{POSINT} %{POSINT}$",
        "^RingBuf\(%{FILENAME_DST}\): Taking too long to be allowed to read\.\.$",
        "^Running Grabber:%{UNIXPATH:[mythtv][grabber][filename]} %{DATA:[mythtv][grabber][params]}$",
        "^ScreenSaverDBus: Could not connect to dbus: The name %{DATA} was not provided by any \.service files$",
        "^ScreenSaverDBus: Created for DBus service: %{DATA}$",
        "^ScreenSaverDBus: Failed to disable screensaver: Type of message, '\(ss\)', does not match expected type '\(susu\)'$",
        "^ScreenSaverDBus: Screensaver (un)?inhibited via %{DATA}$",
        "^ScreenSaverDBus: Successfully inhibited screensaver via %{DATA}(\. cookie %{POSINT}. nom nom)?$",
        "^ScreenSaverX11Private: DPMS ((D|R)eactivated 1|is active\.)$",
        "^Setting Log Level to LOG_INFO$",
        "^Setting QT default locale to [[:lower:]]{2}_[[:upper:]]{2}$",
        "^Setup (Aborted|Bus error|Floating point exception|Illegal instruction|Interrupt|Real-time signal 0| Segmentation fault|Terminated|User defined signal (1|2)) handler$",
        "^Starting HouseKeeper\.$",
        "^Starting IO manager \((read|write)\)$",
        "^Starting process (manager|signal handler)$",
        "^Suspending idle timer$",
        "^TV: ASK_RECORDING %{MYTHCARDID} %{MYTHCHANNEL} 0 0 hasrec: 0 haslater: 0$",
        "^TV: Attempting to change from %{MYTHSTATUS} to %{WORD}$",
        "^TV: Changing from %{WORD} to %{MYTHSTATUS}$",
        "^TV: Created (player|TvPlayWindow)\.$",
        "^TV: Creating TV object$",
        "^TV: E(nter|xit)ing main playback loop\.$",
        "^TV: Main UI disabled\.$",
        "^TV: Main UI disabled\.$",
        "^This application expects to be running a locale that specifies a UTF-8 codeset, and many features may behave improperly with your current language settings. Please set the LC_ALL or LC_CTYPE, and LANG variable(s) in the environment in which this program is executed to include a UTF-8 codeset (such as 'en_US.UTF-8')\.$",
        "^UDPListener: Enabling$",
        "^Using (Frameless|Full Screen) Window$",
        "^Using configuration directory = %{UNIXPATH:[files][src][filename]} $",
        "^Using localhost value of %{HOST_SRC}$",
        "^Using protocol version %{POSINT}$",
        "^Using runtime prefix = /usr$",
        "^Using the Qt painter$",
        "^VDPAU Painter: Clearing VDPAU painter cache.$",
        "^VDPAU: Added %{POSINT} output surfaces \(total %{POSINT}, max %{POSINT}\)$",
        "^VDPAU: Created %{POSINT} output surfaces\.$",
        "^VDPAU: Created VDPAU render device %{INT}x%{INT}$",
        "^VDPAU: Information NVIDIA VDPAU Driver Shared Library %{BASE10NUM} %{DATESTAMP_OTHER}$",
        "^VDPAU: Version %{BASE10NUM}$",
        "^VidOutVDPAU: Added %{POSINT} new buffers. New buffer size %{POSINT} \(%{POSINT} decode and %{POSINT} process\)$",
        "^decoding error$",
        "^eno: Unknown error %{POSINT} \(%{POSINT}\)$",
        "^libcec.so.[0-9]+\.[0-9]+: cannot open shared object file: No such file or directory$",
        "^loaded the Generic plugin$"
      ] } 
    } 
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ "Error", "Known Message", "Benign"] 
      match => { "message" => [ 
        "^Preview: Output path '%{FILENAME_DST}' is not writeable$"
      ] }
    }

    if "Benign" not in [tags] {
      grok { 
        patterns_dir => [ "/etc/logstash/patterns.d/" ] 
        tag_on_failure => [ ] 
        add_tag => [ "Error", "Known Message"] 
        match => { "message" => [ 
          "^ProgramInfo\(%{DATA:[files][src][filename]}\): GetPlaybackURL: '%{DATA}' should be local, but it can not be found\.$",
          "^PlaybackBoxHelper: CHECK_AVAILABILITY '%{DATA:[files][src][filename]}' file not found$",
          "^RemoteFile::openSocket\(file data socket\): Failed to open socket, error was filetransfer_filename_empty$",
          "^FileRingBuf\(%{DATA}\): RingBuffer::RingBuffer\(\): Failed to open remote file \(%{MYTHVIDURL}\)$"
        ] }
      }
    }
  }
}
