filter {
  if [type] == "apache_access" {
    if [http][request][uri] {
      mutate {
        replace => { "message" => "%{[http][request][uri]}" }
      }
    } else if [http][request][raw] { 
      mutate {
        replace => { "message" => "%{[http][request][raw]}" }
      }
    } 
    if [http][response][code] {
      if [http][request][uri] and  [http][response][code] < 400 {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message", "Benign" ]
          match => { "[http][request][uri]" => [
            "^/$",
            "^/index.html$",
            "^/mod_pagespeed_beacon",
            "^/.well-known/caldav$",
            "^/.well-known/carddav$",
            "^\*$"
          ] }
        }
      } 
      if [http][response][code] >= 400 and [http][response][code] < 408 {
        mutate {
          add_tag => [ "Known Message", "Possible Probe" ]
        }
      } 
      if [http][response][code] == 408 or [http][response][code] == 412 {
        mutate {
          add_tag => [ "Known Message", "Benign" ]
        }
      } 
      if [http][response][code] == 409 and [message] =~ /^\/kibana\/elasticsearch\/\.kibana\/.*\?op_type=create$/ {
        mutate {
          add_tag => [ "Known Message", "Benign" ]
        }
      } 
      if [http][response][code] >= 500 {
        mutate {
          add_tag => [ "Error" ]
        }
        grok {
          add_tag        => [ "Known Message" ]
          tag_on_failure => [ ]
          match          => { "message" => [
            "^/guacamole",
            "^/kibana",
            "^/zabbix"
          ] }
        }
      }
    }
  }
  if [type] == "apache_error" or [systemd][unit] == "httpd24-httpd.service"{
    grok {
      add_tag        => [ "Known Message","Benign" ]
      tag_on_failure => [ ]
      match          => { "message" => [
        "^AH00094: Command line: '/usr/sbin/httpd -D FOREGROUND'$",
        "^AH00163: Apache/[0-9.]+ \(%{DATA}\) ((a-zA-Z0-9_)+/[0-9.]+ |Basic ECC )*configured -- resuming normal operations$",
        "^AH00170: caught SIGWINCH, shutting down gracefully$",
        "^AH01232: suEXEC mechanism enabled \(wrapper: /usr/sbin/suexec\)$",
        "^AH01757: generating secret for digest authentication \.\.\.$",
        "^SELinux policy enabled; httpd running as context system_u:system_r:httpd_t:s0$"
      ] }
    }
    grok {
      add_tag        => [ "Known Message","Error" ]
      tag_on_failure => [ ]
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      match          => { "message" => [
        "^AH00161: server reached MaxRequestWorkers setting, consider raising the MaxRequestWorkers setting$",
        "^AH00526: Syntax error on line %{INT} of %{FILENAME_SRC}:$",
        "^AH02282: No slotmem from mod_heartmonitor$",
        "^NSSSessionCacheTimeout is deprecated\. Ignoring\.$",
        "^SSLCertificateFile: file '%{FILENAME_SRC}' does not exist or is empty$"
      ] }
    }
  }
  if ( [type] == "syslog" or [type] == "cee" ) and ( [syslog][identifier] == "httpd" or [systemd][unit] == "httpd.service" ) {
    grok {
      add_tag        => [ "Known Message","Benign" ]
      tag_on_failure => [ ]
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      match          => { "message" => [
        "^GSSAPI client step \d+$"
      ] }
    }
    
  }
}
