filter {
  if [type] == "kibana" {
    mutate {
      add_field => { "application" => "Kibana" }
    }
    if [http][request][path] {
      kv {
        source => "[@metadata][param_list]"
        target => "[http][request][params]"
        prefix => "%{application}_"
        field_split => "?&"
      }
      if [http][verb] == "get" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message", "Benign" ]
          match => { "[http][request][path]" => [
            "^/$",
            "^/\.kibana/_mapping/*/field/_source\$",
            "^/_nodes$",
            "^/app/kibana$",
            "^/bower_components/font-awesome/fonts/fontawesome-webfont\.woff$",
            "^/bower_components/requirejs/require\.js$",
            "^/bundles/(commons|kibana)\.(bundle\.js|style\.css)$",
            "^/bundles/node_modules/bootstrap/fonts/glyphicons-halflings-regular\.woff2?$",
            "^/bundles/node_modules/font-awesome/fonts/fontawesome-webfont\.woff2?$",
            "^/bundles/src/ui/public/images/(elk\.ico|kibana\.svg)$",
            "^/config$",
            "^/elasticsearch/\.kibana/(dashboard|search|visualization)/_search$",
            "^/elasticsearch/\.kibana/_mapping/\*/field/_source$",
            "^/images/(initial_load\.gif|no_border\.js)$",
            "^/index\.js$",
            "^/require\.config\.js$",
            "^/styles/main\.css$",
            "^/styles/theme/elk\.ico$",
            "^/worker-json\.js$"
          ] }
        }
      }
      if [http][verb] == "head" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message", "Benign" ]
          match => { "[http][request][path]" => [
            "^/\.kibana$"
          ] }
        }
      }
      if [http][verb] == "post" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message", "Benign" ]
          match => { "[http][request][path]" => [
            "^/\.kibana/__kibanaQueryValidator/_validate/query\?explain=true&ignore_unavailable=true$",
            "^/\.kibana/index-pattern/_search$",
            "^/\.kibana/search/_search$",
            "^/elasticsearch/\.kibana/(dashboard|index-pattern|search|visualization)/[A-z0-9 _.-]+$",
            "^/elasticsearch/\.kibana/(dashboard|search|visualization)/_search$",
            "^/elasticsearch/\.kibana/_refresh$",
            "^/elasticsearch/\.kibana/index-pattern/_search$",
            "^/elasticsearch/\.kibana/index-pattern/logstash-\*$",
            "^/elasticsearch/_mget$",
            "^/elasticsearch/_msearch$",
            "^/elasticsearch/logstash-\*/_field_stats$"
          ] }
        }
      }
    } else {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Status changed from %{WORD} to green - Kibana index ready$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Alert" ]
        match => { "message" => [
          "^Status changed from %{WORD} to red - Request Timeout after %{INT}ms$"
        ] }
      }
    }
  }
  if [type] == "apache_access" and [http][request][path] =~ /^\/kibana/ and [http][response][code] and [http][response][code] < 400 {
    mutate {
      add_field => { "application" => "Kibana" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "[http][request][path]" => [
          "^/bundles",
          "^/kibana/elasticsearch/logstash-\*/_field_stats$",
          "^/kibana"
        ] }
    }
  }
}
