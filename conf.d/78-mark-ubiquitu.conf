filter {
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] =~ /\(U7LT,.*\)/{
    mutate {
      add_field => { "application" => "Ubiquiti" }
    }
    if [syslog][identifier] =~ /hostapd$/ {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: (sta_stats|associated|disassociated)$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: associated \(aid \d+\)$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: authenticated$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: deauthenticated due to (local deauth request|inactivity \(timer DEAUTH/REMOVE\))$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: did not acknowledge authentication response$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: disassociated due to inactivity$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: disconnected due to excessive missing ACKs$",
          "^%{INTF_DST}: STA %{MAC_SRC} RADIUS: starting accounting session [0-9A-F-]+$",
          "^%{INTF_DST}: STA %{MAC_SRC} WPA: (pairwise|group) key handshake completed \(RSN\)$",
          "^%{INTF_DST}: STA %{MAC_SRC} WPA: received EAPOL-Key with invalid MIC$",
          "^Child connection from %{IP_SRC}:%{PORT_SRC}$",
          "^\[\s*\d+\.\d+\] \[%{INTF_DST}\] FWLOG: \[\d+\] WHAL_ERROR_RESET_CHANNF1 \(  \)$",
          "^\[\s*\d+\.\d+\] ar9300_handle_radar_bb_panic: BB status=0x04008009 rifs=1 - disable$",
          "^process '/bin/stamgr -i 1 ' \(pid \d+\) exited\. Scheduling for restart\.$",
          "^reloading /etc/inittab$",
          "^starting pid \d+, tty '/dev/null': '/bin/stamgr -i 1 '$"
        ] }
      }
    } else if [syslog][identifier] =~ /kernel$/ {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\[\s*\d+\.\d+\] Atheros AR8216/AR8236/AR8316 ag71xx-mdio\.0:00: Port %{BASE10NUM} is (up|down)$",
          "^\[\s*\d+\.\d+\] ar9300_reset\[\d+\]: ar9300_stop_dma_receive failed$",
          "^\[\s*\d+\.\d+\] ar9300_abort_tx_dma\[\d+\]: ar9300_stop_dma_receive failed$",
          "^\[\s*\d+\.\d+\] ar9300_handle_radar_bb_panic: BB status=0x04008009 rifs=0 - disable$",
          "^\[\s*\d+\.\d+\] \[%{INTF_DST}\]( \[%INTERFACENAME}\])? FWLOG: \[\d+\] RATE: ChainMask [13], phymode 10444(84|86|90), ni_flags 0x0[06]22[13b]006, vht_mcs_set 0x(0000|fffa), ht_mcs_set 0xffffff, legacy_rate_set 0x%{BASE16NUM}$", 
          "^\[\s*\d+\.\d+\] \[%{INTF_DST}\]( \[%{INTERFACENAME}\])? FWLOG: \[\d+\] WAL_DBGID_",
          "^\[\s*\d+\.\d+\] \[%{INTF_DST}\] FWLOG: \[\d+\] vap-1 AP PS: AID=%{BASE10NUM} detected out-of-sync now=%{BASE10NUM} tx_waiting=%{BASE10NUM} txq_depth=%{BASE10NUM}$",
          "^\[\s*\d+\.\d+\] wmi_unified_event_rx : no registered event handler : event id 0x901b",
          "^\[\s*\d+\.\d+\]\s+ieee80211_ioctl_kickmac\[%{BASE10NUM}\]",
          "^\[\s*\d+\.\d+\] %{INTF_DST}: no IPv6 routers present$",
          "^\[\s*\d+\.\d+\]\s+Could not find the peer\s*$",
          "^\[\s*\d+\.\d+\]\s+Unable to process TX info\s*$",
          "^\[\s*\d+\.\d+\]\s*$"
        ] }
      }
    } else if [syslog][identifier] =~ /syslog$/ {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^ace_reporter\.reporter_set_managed\(\): \[STATE\] enter MANAGED$",
          "^stamgr\.kick_sta\(\): kick-sta-on %{MAC_SRC} %{INTF_DST} \(reason:3\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^Premature exit: Terminated by signal$",
          "^ace_reporter\.reporter_connected\(\): connect\(%{URI}\) failed with errors: \d+$", 
          "^ace_reporter\.reporter_fail\(\): Unreachable\(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): initial contact failed #\d+, url=%{URI}, rc=\d+$",
          "^ace_reporter\.reporter_next_inform_url\(\): next inform url\[\d+\]=%{URI}$",
          "^ace_reporter\.reporter_connected\(\): connect\(%{URI}\) failed with errors: %{DATA}$",
          "^ace_reporter\.reporter_fail\(\): \[STATE\] entering SELFRUN!!!!$",
          "^ace_reporter\.reporter_fail\(\): inform failed #%{BASE10NUM} \(last inform: %{BASE10NUM} seconds ago\), rc=3$",
          "^ace_reporter\.reporter_fail\(\): Unreachable \(%{URI}\)$",
          "^mca-ctrl.do_monitor\(\): \[event\] fatal radio error detected, resetting$",
          "^ubntevent.update\(\): fatal chip error detected on wifi1$"
        ] }
      }
    }
  }
}
