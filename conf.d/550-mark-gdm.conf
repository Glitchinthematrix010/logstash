filter {
  if [syslog][identifier] == "/usr/libexec/gdm-x-session" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message" ]
      match => { "message" => [
        "^(Activating|Successfully activated) service (name=)?'%{DATA:[dbus][service]}'$",
        "^ABI class: X\.Org (ANSI C Emulation|XInput Driver), version [0-9.]+$",
        "^Before reporting problems, check http://wiki\.x\.org$",
        "^Current version of pixman: [0-9.]+$",
        "^Default Screen Section for depth/fbbpp %{INT}/%{INT}$",
        "^If no devices become available, reconfigure udev or disable AutoAddDevices\.$",
        "^Markers: \(--\) probed, \(\*\*\) from config file, \(==\) default setting,$",
        "^Module class: X\.Org ((Video|Xinput) Driver|Server Extension)$",
        "^Reloaded configuration$",
        "^Using a default monitor configuration\.$",
        "^Using the first device section listed\.$",
        "^X Protocol Version %{INT}, Revision %{INT}$",
        "^X\.Org (ANSI C Emulation|Server Extension |Video Driver|XInput driver ): [0-9.]+$",
        "^X\.Org X Server [0-9.]+$",
        "^\(--\) Depth %{INT} pixmap format is %{INT} bpp$",
        "^\(--\) Log file renamed from \"/var/log/Xorg\.pid-%{INT}\.log\" to \"/var/log/Xorg\.%{INT}\.log\"$",
        "^\(--\) NVIDIA\(%{INT}\)::     (CRT|DFP)-%{INT}$",
        "^\(--\) NVIDIA\(%{INT}\)::     DFP-%{INT} \(boot\)$",
        "^\(--\) NVIDIA\(%{INT}\)::     option$",
        "^\(--\) NVIDIA\(%{INT}\):: (%{DATA} )?(CRT|DFP) -%{INT}: %{BASE10NUM} MHz maximum pixel clock$",
        "^\(--\) NVIDIA\(%{INT}\):: (%{DATA} )?(CRT|DFP)-%{INT}: disconnected$",
        "^\(--\) NVIDIA\(%{INT}\):: (%{DATA} )?DFP-%{INT}: Internal TMDS$",
        "^\(--\) NVIDIA\(%{INT}\):: DPI set to \(%{INT}, %{INT}\); computed from \"UseEdidDpi\" X config$",
        "^\(--\) NVIDIA\(%{INT}\):: Memory: %{INT} kBytes$",
        "^\(--\) NVIDIA\(%{INT}\):: Valid display device\(s\) on GPU-%{INT} at PCI[0-9:]+$",
        "^\(--\) NVIDIA\(%{INT}\):: VideoBIOS: [0-9.]+$",
        "^\(--\) NVIDIA\(%{INT}\)::$",
        "^\(--\) NVIDIA\(GPU-%{INT}\): (%{DATA} )?(CRT|DFP)-[01]: %{INT}\.%{INT} MHz maximum pixel clock$",
        "^\(--\) NVIDIA\(GPU-%{INT}\): (%{DATA} )?(CRT|DFP)-[01]: (connected|Internal TMDS)$",
        "^\(--\) NVIDIA\(GPU-%{INT}\): (%{DATA} )?(CRT|DFP)-[01]: disconnected$",
        "^\(--\) NVIDIA\(GPU-%{INT}\): SONY AVAMP \(DFP-%{INT}\): (%{BASE10NUM} MHz maximum pixel clock|connected|Internal TMDS)$",
        "^\(--\) NVIDIA\(GPU-%{INT}\):$",
        "^\(--\) PCI:*\([0-9:]+\) [0-9a-f:]+ rev %{INT}, Mem @ %{BASE16NUM}/%{INT}, %{BASE16NUM}/%{INT}, %{BASE16NUM}/%{INT}, I/O @ %{BASE16NUM}/%{INT}, BIOS @ 0x\?\?\?\?\?\?\?\?/%{INT}$",
        "^\(--\) RandR disabled$",
        "^\(==\) Automatically (enabling |adding (GPU )?)devices$",
        "^\(==\) FontPath set to:$",
        "^\(==\) Max clients allowed: %{INT}, resource mask: %{BASE16NUM}$",
        "^\(==\) NVIDIA\(%{INT}\):     will be used as the requested mode\.$",
        "^\(==\) NVIDIA\(%{INT}\): (Default visual is TrueColor|Disabling shared memory pixmaps|(Backing store|DPMS|Silken mouse) enabled)$",
        "^\(==\) NVIDIA\(%{INT}\): Depth %{INT}, \(==\) framebuffer bpp %{INT}$",
        "^\(==\) NVIDIA\(%{INT}\): No modes were requested; the default mode \"nvidia-auto-select\"$",
        "^\(==\) NVIDIA\(%{INT}\): RGB weight %{INT}$",
        "^\(==\) NVIDIA\(%{INT}\): Using gamma correction \([0-9.]{3},[0-9.]{3},[0-9.]{3}\)$",
        "^\(==\) NVIDIA\(%{INT}\):$",
        "^\(==\) No (device|monitor) specified for screen \"Default Screen Section\"\.$",
        "^\(==\) No Layout section\.  Using the first Screen section\.$",
        "^\(==\) No screen section available\. Using defaults\.$",
        "^\(==\) Using config directory: \"/etc/X11/xorg\.conf\.d\"$",
        "^\(==\) Using config file: \"/etc/X11/xorg\.conf\"$",
        "^\(==\) Using system config directory \"/usr/share/X11/xorg\.conf\.d\"$",
        "^\(II\) Indirect GLX disabled\.$",
        "^\(II\) Initializing extension GLX$",
        "^\(II\) LoadModule: \"(dri2|fb|glx|libinput|nvidia|ramdac|wfb)\"$",
        "^\(II\) Loader magic: %{BASE16NUM}$",
        "^\(II\) Loading /usr/lib64/nvidia/xorg/libglx\.so$",
        "^\(II\) Loading /usr/lib64/xorg/modules/(drivers/nvidia_drv|input/libinput_drv|libw?fb)\.so$",
        "^\(II\) Loading sub module \"(dri2|fb|ramdac|wfb)\"$",
        "^\(II\) Module (fb|glx|libinput|nvidia|wfb): vendor=\"(NVIDIA Corporation|X\.Org Foundation)\"$",
        "^\(II\) Module ABI versions:$",
        "^\(II\) Module \"(dri2|ramdac)\" already built-in$",
        "^\(II\) NVIDIA Unified Driver for all Supported NVIDIA GPUs$",
        "^\(II\) NVIDIA:     access\.$",
        "^\(II\) NVIDIA: Using %{BASE10NUM} MB of virtual memory for indirect memory$",
        "^\(II\) NVIDIA\(%{INT}\):     ACPI event daemon is available, the NVIDIA X driver will$",
        "^\(II\) NVIDIA\(%{INT}\):     Config Options in the README\.$",
        "^\(II\) NVIDIA\(%{INT}\):     \"AcpidSocketPath\" X configuration options in Appendix B: X$",
        "^\(II\) NVIDIA\(%{INT}\):     \"DFP-%{INT}:nvidia-auto-select\"$",
        "^\(II\) NVIDIA\(%{INT}\):     configuration option may not be set correctly\.  When the$",
        "^\(II\) NVIDIA\(%{INT}\):     details, please see the \"ConnectToAcpid\" and$",
        "^\(II\) NVIDIA\(%{INT}\):     may not be running or the \"AcpidSocketPath\" X$",
        "^\(II\) NVIDIA\(%{INT}\):     try to use it to receive ACPI event notifications\.  For$",
        "^\(II\) NVIDIA\(%{INT}\): ACPI: failed to connect to the ACPI event daemon; the daemon$",
        "^\(II\) NVIDIA\(%{INT}\): Creating default Display subsection in Screen section$",
        "^\(II\) NVIDIA\(%{INT}\): Detected PCI Express Link width: 16X$",
        "^\(II\) NVIDIA\(%{INT}\): NVIDIA GPU GeForce GT 610 \(GF119\) at PCI:1:0:0 \(GPU-%{INT}\)$",
        "^\(II\) NVIDIA\(%{INT}\): Setting mode \"%{DATA}\"$",
        "^\(II\) NVIDIA\(%{INT}\): Validated MetaModes:$",
        "^\(II\) NVIDIA\(%{INT}\): Virtual screen size determined to be %{INT} x %{INT}$",
        "^\(II\) NVIDIA\(%{INT}\): \[DRI[2|3]\]  ( VDPAU driver: nvidia|Setup complete)$",
        "^\(II\) NVIDIA\(GPU-%{INT}\): Deleting GPU-%{INT}$",
        "^\(II\) No input driver specified, ignoring this device\.$",
        "^\(II\) SELinux: Disabled by boolean$",
        "^\(II\) Server terminated successfully \(0\)\. Closing log file\.$",
        "^\(II\) The server relies on udev to provide the list of input devices\.$",
        "^\(II\) This device may have been added with another device file\.$",
        "^\(II\) UnloadModule: \"libinput\"$",
        "^\(II\) Using input driver 'libinput' for '%{DATA}'$",
        "^\(II\) XINPUT: Adding extended input device \"%{DATA}\" \(type: (KEYBOARD|MOUSE), id %{INT}\)$",
        "^\(II\) \"glx\" will be loaded by default\.$",
        "^\(II\) config/udev: Adding input device %{DATA} \(/dev/input/(event|mouse)%{INT}\)$",
        "^\(II\) input device '%{DATA}', /dev/input/event%{INT} is (a keyboard|pointer caps|is tagged by udev as: ((Keyboard|Mouse) ?)+)$",
        "^\(II\) libinput: %{DATA}: (is|needs) a virtual subdevice$",
        "^\(II\) systemd-logind: got fd for /dev/(dev/dri/card|input/event)%{INT} %{INT}:%{INT} fd %{INT} paused %{INT}$",
        "^\(II\) systemd-logind: got (pause|resume) for \d+:\d+$",
        "^\(II\) systemd-logind: not releasing fd for %{INT}:%{INT}, still in use$",
        "^\(II\) systemd-logind: releasing fd for %{INT}:%{INT}$",
        "^\(II\) systemd-logind: returning pre-existing fd for /dev/input/event%{INT} %{INT}:%{INT}$",
        "^\(II\) systemd-logind: took control of session /org/freedesktop/login1/session/_%{INT}$",
        "^\(WW\) \"glamoregl\" will not be loaded unless you've specified it to be loaded elsewhere\.$",
        "^\(WW\) warning, \(EE\) error, \(NI\) not implemented, \(\?\?\) unknown\.$",
        "^\(\*\*\) %{DATA}: Applying InputClass \"(evdev|libinput) (keyboard|pointer) catchall\"$",
        "^\(\*\*\) %{DATA}: Applying InputClass \"system-keyboard\"$",
        "^\(\*\*\) %{DATA}: always reports core events$",
        "^\(\*\*\) Logitech K400: \(accel\) acceleration factor: %{BASE10NUM}$",
        "^\(\*\*\) Logitech K400: \(accel\) acceleration threshold: %{INT}$",
        "^\(\*\*\) Logitech K400: \(accel\) selected scheme none/0$",
        "^\(\*\*\) Media Center Ed\. eHome Infrared Remote Transceiver \(%BASE16NUM}:%{BASE16NUM}\): Ignoring device from InputClass \"Ignore MCEUSB\"$",
        "^\(\*\*\) ModulePath set to \"/usr/lib64/nvidia/xorg,/usr/lib64/xorg/modules\"$",
        "^\(\*\*\) NVIDIA\(%{INT}\):     device %{DATA} \((CRT|DFP)-%{INT}\) \(Using EDID frequencies has been$",
        "^\(\*\*\) NVIDIA\(%{INT}\):     enabled on all display devices\.\)$",
        "^\(\*\*\) NVIDIA\(%{INT}\): Using HorizSync/VertRefresh ranges from the EDID for display$",
        "^\(\*\*\) NVIDIA\(%{INT}\):: Enabling 2D acceleration$",
        "^\(\*\*\) Option \"AccelerationScheme\" \"none\"$",
        "^\(\*\*\) Option \"Device\" \"/dev/input/event%{INT}\"$",
        "^\(\*\*\) Option \"_source\" \"_driver/libinput\"$",
        "^\(\*\*\) Option \"_source\" \"server/udev\"$",
        "^\(\*\*\) Option \"config_info\" \"udev:/sys/devices/LNXSYSTM:00/LNXPWRBN:00/input/input1/event1\"$",
        "^\(\*\*\) Option \"config_info\" \"udev:/sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0C0C:00/input/input0/event0\"$",
        "^\(\*\*\) Option \"fd\" \"%{INT}\"$",
        "^\(\*\*\) Option \"xkb_layout\" \"us\"$",
        "^\(\*\*\) |   |-->Device \"Videocard%{INT}\"$",
        "^\(\*\*\) |   |-->Monitor \"<default monitor>\"$",
        "^\(\*\*\) |-->Screen \"Default Screen Section\" \(0\)$",
        "^\(\+\+\) from command line, \(!!\) notice, \(II\) informational,$",
        "^\(\+\+\) using VT number %{INT}$",
        "^built-ins$",
        "^catalogue:/etc/X11/fontpath\.d,$",
        "^compiled for [0-9.]+, module version = [0-9.]+$",
        "^to make sure that you have the latest version\.$"

      ] }
    }
  } else if [systemd][executable] == "  /usr/libexec/gdm-session-worker" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Benign" ]
      match => { "message" => [ 
        "^AccountsService: ActUserManager: user \(null\) has no username \(object path: /org/freedesktop/Accounts/User0, uid: 0\)$"
      ] }
    }
  }
}
