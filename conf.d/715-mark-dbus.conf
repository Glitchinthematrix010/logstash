filter {
  if [type] == "syslog" or [type] == "cee" and ( [syslog][identifier] =~ /^dbus/ or [systemd][program] =~ /^dbus/ ) {
    if [syslog][identifier] == "dbus" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\[system\] Activating service name='%{DATA:[dbus][service]}'( \(using servicehelper\))?$",
          "^\[system\] Activating via systemd: service name='%{DATA:[dbus][service]}' unit='%{DATA:[systemd][unit]}'$",
          "^\[system\] Failed to activate service '%{DATA:[dbus]service]}': timed out$",
          "^\[system\] Reloaded configuration$",
          "^\[system\] Successfully activated service '%{DATA:[dbus][service]}'$"
        ] }
      }
    } else if [systemd][program] == "dbus-daemon" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^avc:\s+received policyload notice \(seqno=%{INT}\)$",
          "^Unknown username \"gdm\" in message bus configuration file$",
          "^\[system\] Activating via systemd: service name='%{DATA:[dbus][service]}' unit='%{DATA:[systemd][unit]}'$",
          "^\[system\] Successfully activated service '%{DATA:[dbus][service]}'$",
          "^dbus\[%{INT}\]: \[system\] Activating via systemd: service name='%{DATA}' unit='%{DATA:[systemd][unit]}'$",
          "^dbus\[%{INT}\]: \[system\] Reloaded configuration$",
          "^dbus\[%{INT}\]: \[system\] Successfully activated service '%{DATA:[systemd][unit]}'$",
          "^dbus\[%{INT}\]: avc:  received policyload notice \(seqno=\d+\)$",
          "^org.a11y.Bus  (Activating|Successfully activated) service name='org\.a11y\.(atspi\.Registry|Bus)'$",
          "^org.a11y.atspi.Registry SpiRegistry daemon is running with well-known name - org\.a11y\.atspi\.Registry$",
          "^org.gnome.OnlineAccounts  goa-daemon-Message: goa-daemon version [0-9.]+ starting$",
          "^org.gtk.vfs.(Afc|Goa|GPhoto2|MTP|UDisks2)VolumeMonitor  Volume monitor alive$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Warning" ]
        match => { "message" => [
          "^\*\* \(evolution-source-registry:%{INT}\): WARNING \*\*: secret_service_search_sync: must specify at least one attribute to match$",
          "^org.gnome.Identity  \(process:%{INT}\): libgoaidentity-WARNING \*\*: GoaKerberosIdentityManager: Using polling for change notification for credential cache type 'KEYRING'$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^\(evolution-calendar-factory-subprocess:%{INT}\): libedata-cal-CRITICAL \*\*: e_intervaltree_destroy: assertion 'E_IS_INTERVALTREE \(tree\)' failed$",
          "^org.a11y.atspi.Registry Xlib:  extension \"XEVIE\" missing on display \":%{INT}\"\.$",
          "^org.gnome.Shell.CalendarServer  gnome-shell-calendar-server\[%{INT}\]: Lost \(or failed to acquire\) the name org\.gnome\.Shell\.CalendarServer - exiting$",
          "^org.gtk.vfs.Daemon  A connection to the bus can't be made$"
        ] }
      }
    }
  }
}
