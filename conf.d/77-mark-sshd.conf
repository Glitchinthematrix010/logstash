filter { 
  if [type] == "syslog" or [type] == "cee" and [syslog_identifier] == "sshd" { 
    mutate {
      add_field => { "application" => "sshd" }
    }
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ "Known Message" ] 
      match => { "message" => [ 
        "^error: AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys returned status 1$", 
        "^Accepted publickey for %{SITE_USERS:username_dst} from %{IP_SRC} port %{BASE10NUM:port_src} ssh2: \w+ [a-fA-F0-9:]+$", 
        "^Accepted password for %{USERNAME:username_dst} from %{IP_SRC} port %{BASE10NUM:port_src} ssh2$", 
        "^pam_\S+\((su-l|sshd):session\): session closed for user %{USERNAME:username_dst}$",
        "^pam_\S+\((su-l|sshd):session\): session opened for user %{USERNAME:username_dst} by (%USERNAME:username_src})?\(uid=%{BASE10NUM}\)$", 
        "^Did not receive identification string from 10\.0\.70\.2$", 
        "^Connection closed by %{IP_SRC}( \[preauth\])?$", 
        "^Received disconnect from %{IP_SRC}: %{BASE10NUM}: (Bye Bye|Bye|disconnected by user)?(?: \[preauth\])$"
      ] } 
    } 
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      add_tag => [ "Benign" ] 
      tag_on_failure => [ ] 
      match => { "message" => [ 
        "^Did not receive identification string from 10\.0\.70\.2$", 
        "^Connection closed by 10\.0\.70\.2 \[preauth\]$" 
      ] } 
    } 
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ "Alert", "Known Message" ] 
      match => { "message" => [ 
        "^Protocol major versions differ for %{IP_SRC}: %{DATA} vs\. %{DATA}$",
        "^Address %{IP_SRC} maps to %{HOSTNAME:hostname_src}, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!$",
        "^Authentication methods list \"%{DATA}\" contains disabled method, skipping( \[preauth\])?$",
        "^Did not receive identification string from %{IP_SRC}$",
        "^Invalid user %{USERNAME:username_dst} from %{IP_SRC}$",
        "^User %{USERNAME:username_dst} from %{IP_SRC} not allowed because not listed in AllowUsers$",
        "^error: Disabled method \"%{DATA}\" in AuthenticationMethods list \"%{DATA}\"( \[preauth\])?$",
        "^error: Received disconnect from %{IP_SRC}: %{BASE10NUM}: (com.jcraft.jsch.JSchException: Auth fail|java.net.SocketTimeoutException: Read timed out) \[preauth\]$",
        "^fatal: Read from socket failed: Connection reset by peer \[preauth\]$",
        "^input_userauth_request: invalid user %{USERNAME:username_dst} \[preauth\]$",
        "^reverse mapping checking getaddrinfo for %{HOSTNAME:hostname_src} \[%{IP_SRC}\] failed - POSSIBLE BREAK-IN ATTEMPT!$"
      ] }
    }
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ "Unknown Message" ] 
      add_tag => [ "Known Message", "Benign"] 
      match => { "message" => [ 
        "^GSSAPI (client|server) step %{BASE10NUM}$" 
      ] } 
    }
  }
}
