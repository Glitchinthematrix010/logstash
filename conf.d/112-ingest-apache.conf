filter {
  if [type] == "apache_access" or [file] =~ /access_log$/ or [source] =~ /access_log$/ {
    mutate { 
      replace        => { "type" => "apache_access" }
      add_field      => { "[syslog][hostname]" => "%{received_from}" }
    }
    grok {
      break_on_match => "false"
      patterns_dir   => [ "/etc/logstash/patterns.d/" ]
      match          => { "original"             => "%{KRB_APACHE_LOG}"
                          "[http][request][uri]" => "%{URIPATH:[http][request][path]}(%{URIPARAM:[@metadata][param_list]})?"
      }
    }
    if [http][request][uri] {
      mutate {
        replace => { "message" => "%{[http][request][uri]}" }
      }
    } else if [http][request][raw] {
      mutate {
        replace => { "message" => "%{[http][request][raw]}" }
      }
    }
    mutate {
      convert        => { 
                          "[http][response][code]"  => "integer" 
                          "[http][response][bytes]" => "integer" 
                        }
    }
    date {
      match          => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z", "dd/MMM/yyyy:HH:mm:ss.SSS Z" ]
    }
  }
  if [type] == "apache_error" or [file] =~ /error_log$/ {
    mutate {
      replace        => { "type" => "apache_error" } 
      add_field      => { "[syslog][hostname]" => "%{received_from}" }
    }
    grok {
      patterns_dir   => [ "/etc/logstash/patterns.d/" ]
      match          => [ "original", "%{APACHE_ERROR_LOG}" ]
    }
    date {
      match          => [ "timestamp" , "EEE MMM dd HH:mm:ss.SSSSSS YYYY", "EEE MMM  d HH:mm:ss.SSSSSS YYYY" ]
    }
  }
}
