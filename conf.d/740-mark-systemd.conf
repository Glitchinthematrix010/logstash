filter {
  if ( [type] == "syslog" or [type] == "cee" ) and ( [systemd][program] =~ /^systemd/ or [syslog][identifier] =~ /^systemd/ ) {
    if [systemd][program] == "systemd" or [syslog][identifier] == "systemd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^%{WORD}.automount: Got automount request for %{FILENAME_DST}, triggered by %{POSINT} \(%{GREEDYDATA}\)$",
          "^(Closed|Listening on) (Journal|udev (Control|Kernel)) Socket\.$",
          "^Created slice %{GREEDYDATA}\.slice\.$",
          "^Created slice System Slice\.$",
          "^Detected (architecture x86-64|virtualization kvm)\.$",
          "^Inserted module 'ip_tables'$",
          "^Metadata cache (created|refreshed recently)\.$",
          "^Mount(ed|ing) %{FILENAME_DST}\.(\.\.)?$",
          "^Reached target %{GREEDYDATA}\.$",
          "^Received SIGRTMIN\+24 from PID %{INT} \(kill\)\.$",
          "^Relabelled /dev and /run in %{BASE10NUM}%{TIMEUNITS}\.$",
          "^Reload(ed|ing).*$",
          "^Removed slice %{GREEDYDATA}\.slice\.$",
          "^Running in initial RAM disk\.$",
          "^Set hostname to <%{HOSTNAME}>.$",
          "^St(art|op)(ed|p?ing)? %{GREEDYDATA}(\.service)?\.(\.\.)?$",
          "^St(art|opp)ing user-%{POSINT:[user][dst][uid]:int}\.slice\.$",
          "^Start(ed|ing) (dracut cmdline hook|Exit the Session|Journal (Service|Socket)|Load Kernel Modules|Local File Systems|Setup Virtual Console|Shutdown|Slices|Sockets|Swap|System Slice|Timers)\.(\.\.)?$",
          "^Start(ed|ing) Apply Kernel Variables\.(\.\.)?$",
          "^Start(ed|ing) Create Static Device Nodes in /dev\.(\.\.)?$",
          "^Start(ed|ing) Create list of required static device nodes for the current kernel\.(\.\.)?$",
          "^Start(ed|ing)? Session \d+ of user %{SITE_SESSION_USERS:[user][dst][username]}\.$",
          "^Started dracut ask for additional cmdline parameters\.$",
          "^Starting (udev (Control|Kernel) Socket)\.$",
          "^Starting -.slice\.$",
          "^Startup finished in %{INT}%{TIMEUNITS}\.$",
          "^Stopp(ed target|ing) (Basic System|Default|Paths|Sockets|Timers|)\.$",
          "^Stopped %{DATA}\.$",
          "^Stopped User Manager for UID %{UID_DST}\.$",
          "^Successfully loaded SELinux policy in %{BASE10NUM}%{TIMEUNITS}\.$",
          "^Time has been changed$",
          "^Unmounting %{FILENAME_DST}\.\.\.$",
          "^pam_unix\(systemd-user:session\): session (closed|opened) for user %{USER_DST}( by \(uid=%{UID_SRC}\))?$",
          "^sleep\.target: Unit not needed anymore\. Stopping\.$",
          "^suspend\.target: Unit suspend\.target is bound to inactive unit systemd-suspend\.service\. Stopping, too\.$",
          "^systemd %{INT} running in system mode\. \(([+-](ACL|APPARMOR|AUDIT|BLKID|ELFUTILS|IMA|GCRYPT|GNUTLS|IDN|KMOD|LIBCRYPTSETUP|LZ4|PAM|SECCOMP|SELINUX|SMACK|SYSVINIT|UTMP|XZ|) ?)+\)$"
        ] }
      }
      if "Benign" not in [tags] {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message", "Error" ]
          match => { "message" => [
            "^%{SYSTEMDUNIT} failed\.$",
            "^%{SYSTEMDUNIT} holdoff time over, scheduling restart\.$",
            "^%{SYSTEMDUNIT} stop-sigterm timed out\. Killing\.$",
            "^%{SYSTEMDUNIT}: Failed with result '(exit-code|signal|timeout)'\.$",
            "^%{SYSTEMDUNIT}: Main process exited, code=(exit|kill)ed, status=%{INT}/(FAILURE|TRAP)$",
            "^%{SYSTEMDUNIT}: Service hold-off time over, scheduling restart\.$",
            "^%{SYSTEMDUNIT}: State 'stop-sigterm' timed out. Killing.$",
            "^%{SYSTEMDUNIT}: Unit cannot be reloaded because it is inactive\.$",
            "^%{SYSTEMDUNIT}: Unit entered failed state\.$",
            "^%{SYSTEMDUNIT}: control process exited, code=exited status=%{INT}$",
            "^%{SYSTEMDUNIT}: main process exited, code=(exited|killed), status=%{INT}/(ABRT|FAILURE|KILL|SEGV)$",
            "^Configuration file %{FILENAME_SRC} is marked (executable|world-inaccessible)\. (This has no effect as configuration data is accessible via APIs without restrictions|Please remove executable permission bits)\. Proceeding anyway\.$",
            "^Error: Failed to synchronize cache for repo '%{DATA:[dnf][repo]}'$",
            "^Failed to start %{DATA}\.$",
            "^PID file %{FILENAME_SRC} not readable \(yet\?\) after start\.$",
            "^Received SIGRTMIN\+24 from PID %{INT} \(kill\)\.$",
            "^Reexecuting\.$",
            "^Unit %{SYSTEMDUNIT} cannot be reloaded because it is inactive.$",
            "^Unit %{SYSTEMDUNIT} entered failed state\.$",
            "^start request repeated too quickly for %{SYSTEMDUNIT}$"
          ] }
        }
      }
    } else if [systemd][program] == "systemd-fsck" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^systemd-fsck  /sbin/fsck\.%{WORD}: %{WORD} file system\.$"
        ] }
      }
    } else if [systemd][program] == "systemd-logind" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^New session \d+ of user %{USER_DST}\.$",
          "^Operation finished\.$",
          "^Power key pressed\.$",
          "^Removed session \d+\.$"
        ] }
      }
    } else if [systemd][program] == "systemd-tmpfiles" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Start(ed|ing) Cleanup of Temporary Directories\.(\.\.)?$",
          "^Stopped Daily Cleanup of Temporary Directories\.$",
          "^Failed to open directory /tmp: Too many levels of symbolic links$",
          "^\[/usr/lib/tmpfiles\.d/[[:alnum:]_-]+\.conf:%{POSINT}\] Duplicate line for path \"%{PATH:[filename][src]}\", ignoring\.$"
        ] }
      }
    } else if [systemd][program] == "systemd-udevd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^starting version %{INT}$"
        ] }
      }
    } else if [systemd][program] == "systemd-shutdown" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Sending SIGTERM to remaining processes\.\.\.$"
        ] }
      }
    } else if [systemd][program] == "systemd-sleep" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Suspending system\.\.\.$",
          "^System resumed\.$"
        ] }
      }
    } else if [syslog][iidentifier] == "systemd-journald" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Received SIGTERM from PID %{INT} \(%{DATA}\)\.$"
        ] }
      }
    } else if [systemd][program] == "systemd-journal" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^libvirt version: [0-9.]+, package: %{DATA} \(%{DATA}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^The name %{DATA} was not provided by any \.service files$",
          "^Suppressed %{INT} messages from %{PATH}$"
        ] }
      }
    }
  }
}
