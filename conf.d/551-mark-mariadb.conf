filter {
  if [type] == "mariadb" {
    mutate {
      add_field => { "application" => "MariaDB" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      add_field => { "[@metadata][mysqlParsed]" => "True" }
      tag_on_failure => [ ]
      overwrite => [ "message" ]
      match => { "original" => [
        "^%{MARIADBLOGENTRY}$"
      ] }
    }
    if [@metadata][mysqlParsed] == "True" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        add_tag => [ "Known Message", "Benign" ]
        tag_on_failure => [ ]
        match => { "message" => [
          "^/usr/libexec/mysqld \(mysqld [0-9.]+-MariaDB-log\) starting as process %{INT} ...$",
          "^/usr/libexec/mysqld: Normal shutdown$",
          "^/usr/libexec/mysqld: Shutdown complete$",
          "^/usr/libexec/mysqld: ready for connections\.$",
          "^Apply batch completed$",
          "^Completed initialization of buffer pool$",
          "^Compressed tables use zlib [0-9.]+$",
          "^Database was not shut down normally!$",
          "^Doing recovery: scanned up to log sequence number %{INT}$",
          "^Initializing buffer pool, size = %{BASE10NUM}%{MEMUNITS}$",
          "^Log scan progressed past the checkpoint lsn %{INT}$",
          "^Logging to '%{FILENAME_DST}'\.$",
          "^Mutexes and rw_locks use GCC atomic builtins$",
          "^Plugin \'FEEDBACK\' is disabled\.$",
          "^Progress in percents: (\d+ ?)+$",
          "^Reading tablespace information from the \.ibd files\.\.\.$",
          "^Restoring possible half-written data pages from the doublewrite$",
          "^Server socket created on IP: \'%{IP_SRC}\'\.$",
          "^Shutdown completed; log sequence number %{INT}$",
          "^Starting an apply batch of log records to the database\.\.\.$",
          "^Starting crash recovery\.$",
          "^Starting mysqld daemon with databases from %{FILENAME_SRC}$",
          "^Starting shutdown\.\.\.$",
          "^The InnoDB memory heap is disabled$",
          "^Using Linux native AIO$",
          "^Waiting for %{INT} pages to be flushed$",
          "^Waiting for the background threads to start$",
          "^buffer\.\.\.$",
          "^highest supported file format is Barracuda\.$",
          "^mysqld from pid file %{FILENAME_SRC} ended$"
        ] }
      }
      if "Known Message" not in [tags] and "Benign" not in [tags] {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message","Error" ]
          match => { "message" => [
            "^\[ERROR\] Event Scheduler: An error occurred when initializing system tables\. Disabling the Event Scheduler\.$"
          ] }
        }
      }
    } else {
      mutate {
        add_tag => [ "_mysqlParseFailure" ]
      }
    }
  } else if [syslog][identifier] == "mysql-prepare-db-dir" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      add_tag => [ "Known Message", "Benign" ]
      tag_on_failure => [ ]   
      match => { "message" => [
        "^Database MariaDB is probably initialized in %{FILENAME_DST} already, nothing is done\.$",
        "^If this is not the case, make sure the %{FILENAME_DST} is empty before running mysql-prepare-db-dir\.$"
      ] }
    }
  }
}
