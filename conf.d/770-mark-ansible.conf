filter {
  if [syslog][identifier] == "python" and [message] =~ /ansible/ {
    mutate {
      add_field => { "application" => "Ansible" }
      rename => {
        "ATTRIBUTES"                      => "[ansible][attributes]"
        "BACKREFS"                        => "[ansible][backrefs]"
        "BACKUP"                          => "[ansible][backup]"
        "CHECKSUM_ALGO"                   => "[ansible][checksumalgorithm]"
        "CHECKSUM_ALGORITHM"              => "[ansible][checksumalgorithm]"
        "CONF_FILE"                       => "[ansible][config_file]"
        "CONTENT"                         => "[ansible][content]"
        "CREATE"                          => "[ansible][create]"
        "DELIMITER"                       => "[ansible][delimiter]"
        "DEST"                            => "[ansible][dest]"
        "DIFF_PEEK"                       => "[ansible][diff_peek]"
        "DIRECTORY_MODE"                  => "[ansible][directory_mode]"
        "DISABLE_GPG_CHECK"               => "[ansible][disable_gpg_check]"
        "DISABLEREPO"                     => "[ansible][repository][disable]"
        "ENABLEREPO"                      => "[ansible][repository][enable]"
        "EXCLUDE"                         => "[ansible][exclude]"
        "FOLLOW"                          => "[ansible][follow]"
        "FORCE"                           => "[ansible][force]"
        "GET_ATTRIBUTES"                  => "[ansible][get_attributes]"
        "GET_CHECKSUM"                    => "[ansible][get_checksum]"
        "GET_MD5"                         => "[ansible][get_md5]"
        "GET_MIME"                        => "[ansible][get_mime]"
        "GROUP"                           => "[ansible][group]"
        "INSERTAFTER"                     => "[ansible][insert_after]"
        "INSERTBEFORE"                    => "[ansible][insert_before]"
        "INSTALL_REPOQUERY"               => "[ansible][install_repoquery]"
        "INSTALLROOT"                     => "[ansible][installroot]"
        "LINE"                            => "[ansible][line]"
        "LIST"                            => "[ansible][list]"
        "MODE"                            => "[ansible][mode]"
        "NAME"                            => "[ansible][name]"
        "ORIGINAL_BASENAME"               => "[ansible][original_basename]"
        "OWNER"                           => "[ansible][owner]"
        "PATH"                            => "[ansible][path]"
        "RECURSE"                         => "[ansible][recurse]"
        "REGEXP"                          => "[ansible][regexp]"
        "REMOTE_SRC"                      => "[ansible][remote_src]"
        "SELEVEL"                         => "[ansible][selinux][level]"
        "SEROLE"                          => "[ansible][selinux][role]"
        "SETYPE"                          => "[ansible][selinux][type]"
        "SEUSER"                          => "[ansible][selinux][user]"
        "SKIP_BROKEN"                     => "[ansible][skip_broken]"
        "SRC"                             => "[ansible][src]"
        "STATE"                           => "[ansible][state]"
        "UNSAFE_WRITES"                   => "[ansible][unsafe_writes]"
        "UPDATE_CACHE"                    => "[ansible][update_cache]"
        "VALIDATE"                        => "[ansible][validate]"
        "VALIDATE_CERTS"                  => "[ansible][validate_certs]"
      }
    }
    grok {
      patterns_dir     => [ "/etc/logstash/patterns.d/" ]
      add_field        => { "application" => "ansible" }
      remove_field     => [ "FACT_PATH", "FILTER", "MODULE" ]
      tag_on_failure   => [ ]
      add_tag          => [ "Known Message", "Benign" ]
      match            => { "message" => [
                          "^detected unhandled Python exception in '/tmp/ansible_%{WORD}/ansible_module_%{WORD}.py'$",
                          "^ansible-%{NOTSPACE} Invoked with %{GREEDYDATA:[@metadata][ansible][params]}$"
      ] }
    }
    if [@metadata][ansible][params] {
      kv {
        source           => "params"
        target           => "[ansible]"
        include_brackets => true
      }
      mutate {
        remove_field => [ "params" ]
      }
    }
  }
  if [syslog][identifier] =~ /^ansible-/ {
    mutate {
      add_field => { "application" => "Ansible" }
    }
    grok {
      patterns_dir     => [ "/etc/logstash/patterns.d/" ]
      add_field        => { "application" => "ansible" }
      remove_field     => [ "FACT_PATH", "FILTER", "MODULE" ]
      tag_on_failure   => [ ]
      add_tag          => [ "Known Message", "Benign" ]
      match            => { "message" => [
                          "^Invoked with %{GREEDYDATA:[@metadata][ansible][params]}$"
      ] }
    }
    if [@metadata][ansible][params] {
      kv {
        source           => "params"
        target           => "[ansible]"
        include_brackets => true
      }
      mutate {
        remove_field => [ "params" ]
      }
    }
  }
}

