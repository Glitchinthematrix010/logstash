filter {
  if [type] == "cee"  {
    grok {
      match => { "original" => "(\<%{POSINT:[syslog][pri]}\>)?(%{SYSLOGTIMESTAMP:[@metadata][timestamp]}|%{TIMESTAMP_ISO8601:[@metadata][timestamp]}) %{SYSLOGHOST:[syslog][hostname]} %{DATA:[syslog][identifier]}(\[%{POSINT:[syslog][pid]}\])?:? @cee: %{GREEDYDATA:jsonmsg}$" }
      tag_on_failure => [ "_ceeParseFailure" ]
    }
    if "_ceeParseFailure" not in [tags] {
      mutate {
        gsub => [ "jsonmsg","}\\n$","}" ]
        add_field => { "[@metadata][_ceeParsed]" => 1 }
      }
      if [jsonmsg] == "{}" {
        drop {}
      }
      json {
        source => "jsonmsg"
      }
      if [MESSAGE] == "" {
        drop { }
      }
      mutate {
        rename => {
          "message"                         => "original_message"
          "CODE_FILE"                       => "[systemd][sourcecode][file]"
          "CODE_FUNC"                       => "[systemd][sourcecode][function]"
          "CODE_LINE"                       => "[systemd][sourcecode][line]"
          "EXIT_CODE"                       => "[systemd][code][exit]"
          "EXIT_STATUS"                     => "[systemd][status][exit]"
          "FACT_PATH"                       => "[ansible][fact_path]"
          "FILTER"                          => "[ansible][filter]"
          "INITRD_USEC"                     => "[systemd][initrd][usec]"
          "KERNEL_USEC"                     => "[systemd][kernel][usec]"
          "JOB_TYPE"                        => "[systemd][job][type]"
          "JOB_RESULT"                      => "[systemd][job][result]"
          "LEADER"                          => "[systemd][leader]"
          "MESSAGE"                         => "message"
          "MESSAGE_ID"                      => "[systemd][message_id]"
          "PRIORITY"                        => "[systemd][priority]"
          "RESULT"                          => "[systemd][result]"
          "SESSION_ID"                      => "[systemd][session_id]"
          "SEAT_ID"                         => "[systemd][seat][id]"
          "SSSD_DOMAIN"                     => "[systemd][sssd][domain]"
          "SYSLOG_FACILITY"                 => "[syslog][code][facility]"
          "SYSLOG_IDENTIFIER"               => "[syslog][identifier]"
          "SYSLOG_PID"                      => "[syslog][pid]"
          "UNIT"                            => "[systemd][unit]"
          "USER_ID"                         => "[user][src][username]"
          "USERSPACE_USEC"                  => "[systemd][userspace][usec]"
          "WHERE"                           => "[systemd][where]"
          "_KERNEL_DEVICE"                  => "[systemd][kernel][device]"
          "_KERNEL_SUBSYSTEM"               => "[systemd][kernel][subsystem]"
          "_UDEV_SYSNAME"                   => "[systemd][udev][sysname]"
          "_AUDIT_LOGINUID"                 => "[systemd][audit][loginuid]"
          "_AUDIT_SESSION"                  => "[systemd][audit][session]"
          "_BOOT_ID"                        => "[systemd][boot_id]"
          "_CAP_EFFECTIVE"                  => "[systemd][cap][effective]"
          "_CMDLINE"                        => "[systemd][command_line]"
          "_COMM"                           => "[systemd][program]"
          "_EXE"                            => "[systemd][executable]"
          "_GID"                            => "[systemd][gid]"
          "_HOSTNAME"                       => "[systemd][hostname]"
          "_MACHINE_ID"                     => "[systemd][machine_id]"
          "_PID"                            => "[systemd][pid]"
          "_SELINUX_CONTEXT"                => "[systemd][selinux][context]"
          "_SOURCE_MONOTONIC_TIMESTAMP"     => "[systemd][timestamp][monotonic]"
          "_SOURCE_REALTIME_TIMESTAMP"      => "[systemd][timestamp][realtime]"
          "_SYSTEMD_CGROUP"                 => "[systemd][cgroup]"
          "_SYSTEMD_OWNER_UID"              => "[systemd][owner][uid]"
          "_SYSTEMD_SESSION"                => "[systemd][session]"
          "_SYSTEMD_SLICE"                  => "[systemd][slice]"
          "_SYSTEMD_UNIT"                   => "[systemd][unit]"
          "_TRANSPORT"                      => "[systemd][transport]"
          "_UID"                            => "[user][src][uid]"
          "msg"                             => "message"
        }

        convert => {
          "[syslog][pid]"                   => "integer"
          "[syslog][code][facility]"        => "integer"
          "[syslog][code][severity]"        => "integer"
          "[syslog][facility]"              => "string"
          "[syslog][severity]"              => "string"
          "[systemd][timestamp][realtime]"  => "integer"
          "[systemd][sourcecode][line]"     => "integer"
          "[systemd][code][exit]"           => "integer"
          "[systemd][priority]"             => "integer"
          "[systemd][uid]"                  => "integer"
          "[systemd][gid]"                  => "integer"
          "[systemd][pid]"                  => "integer"
          "signal"                          => "integer"
        }
        remove_field => [ "MODULE" ]
      }
      if [systemd][priority] and ![syslog][code][severity] {
        mutate {
          add_field => { "[syslog][code][severity]" => "%{[systemd][priority]}" }
        }
      }
      if [syslog][code][facility] and ![syslog][facility] {
        #  Numerical             Facility
        #      Code
        #
        #       0             kernel messages
        #       1             user-level messages
        #       2             mail system
        #       3             system daemons
        #       4             security/authorization messages
        #       5             messages generated internally by syslogd
        #       6             line printer subsystem
        #       7             network news subsystem
        #       8             UUCP subsystem
        #       9             clock daemon
        #      10             security/authorization messages
        #      11             FTP daemon
        #      12             NTP subsystem
        #      13             log audit
        #      14             log alert
        #      15             clock daemon
        #      16             local use 0  (local0)
        #      17             local use 1  (local1)
        #      18             local use 2  (local2)
        #      19             local use 3  (local3)
        #      20             local use 4  (local4)
        #      21             local use 5  (local5)
        #      22             local use 6  (local6)
        #      23             local use 7  (local7)
        translate {
          dictionary  => [ 
                          "0",  "kernel",
                          "1",  "user-level",
                          "2",  "mail",
                          "3",  "daemon",
                          "4",  "security/authorization",
                          "5",  "syslogd",
                          "6",  "line printer",
                          "7",  "network news",
                          "8",  "uucp",
                          "9",  "clock",
                          "10", "security/authorization",
                          "11", "ftp",
                          "12", "ntp",
                          "13", "log audit",
                          "14", "log alert",
                          "15", "clock",
                          "16", "local0",
                          "17", "local1",
                          "18", "local2",
                          "19", "local3",
                          "20", "local4",
                          "21", "local5",
                          "22", "local6",
                          "23", "local7"
                         ]
          field       => "[syslog][code][facility]"
          destination => "[syslog][facility]"
        }
      }
      if [syslog][code][severity] and ![syslog][severity] {
        #  Numerical         Severity
        #    Code
        #
        #     0       Emergency: system is unusable
        #     1       Alert: action must be taken immediately
        #     2       Critical: critical conditions
        #     3       Error: error conditions
        #     4       Warning: warning conditions
        #     5       Notice: normal but significant condition
        #     6       Informational: informational messages
        #     7       Debug: debug-level messages
        translate {
          dictionary  => [ 
                           "0", "emergency",
                           "1", "alert",
                           "2", "critical",
                           "3", "error",
                           "4", "warning",
                           "5", "notice",
                           "6", "informational",
                           "7", "debug"        
                         ]
          field       => "[syslog][code][severity]"
          destination => "[syslog][severity]"
        }
      }
      if [syslog][identifier] == "kibana" and [message] =~ /^{.*}$/ {
        json {
          source => "message"
            target => "kibana"
        }
        mutate {
          replace   => {  "type"                                       => "kibana"
                          "message"                                    => "%{[kibana][message]}"
          }
          convert   => { "[kibana][req][responseTime]"                => "integer"
                         "[kibana][res][statusCode]"                  => "integer"
                         "[kibana][res][contentLength]"               => "integer"
                         "[kibana][req][headers][content-length]"     => "integer"
          }
          rename    => {  "[kibana][req][headers][accept]"             => "[http][headers][accept]"
                          "[kibana][req][headers][accept-encoding]"    => "[http][headers][accept-encoding]"
                          "[kibana][req][headers][accept-language]"    => "[http][headers][accept-language]"
                          "[kibana][req][headers][connection]"         => "[http][headers][connection]"
                          "[kibana][req][headers][content-length]"     => "[http][headers][content-length]"
                          "[kibana][req][headers][dnt]"                => "[http][headers][dnt]"
                          "[kibana][req][headers][host]"               => "[http][headers][host]"
                          "[kibana][req][headers][referer]"            => "[http][headers][referer]"
                          "[kibana][req][headers][user-agent]"         => "[http][headers][user-agent]"
                          "[kibana][req][headers][via]"                => "[http][headers][via]"
                          "[kibana][req][headers][x-forwarded-for]"    => "[http][headers][x-forwarded-for]"
                          "[kibana][req][headers][x-forwarded-host]"   => "[http][headers][x-forwarded-host]"
                          "[kibana][req][headers][x-forwarded-server]" => "[http][headers][x-forwarded-server]"
                          "[kibana][req][method]"                      => "[http][verb]"
                          "[kibana][req][url]"                         => "[http][request][uri]"
                          "[kibana][res][contentLength]"               => "[http][response][content-length]"
                          "[kibana][res][statusCode]"                  => "[http][response][code]"
          }
        }
        grok {
          patterns_dir   => [ "/etc/logtash/patterns.d" ]
          tag_on_failure => [ ]
          match          => { "[http][request][uri]" => "%{URIPATH:[http][request][path]}(%{URIPARAM:[@metadata][param_list]})?" }
        }
        if [kibana][req][remoteAddress] {
          mutate {
            add_field => { "[host][src][ipv4]"                 => "%{[kibana][req][remoteAddress]}" }
          }
        }
        if [kibana][res][responseTime] {
          mutate {
            add_field => { "[http][response][response-time]"   => "%{[kibana][res][responseTime]}" }
          }
        }
        if [kibana][req][headers][kbn-version] {
          mutate {
            add_field => { "[http][headers][kbn-version]"      => "%{[kibana][req][headers][kbn-version]}" }
          }
        }
        if [kibana][req][headers][origin]  {
          mutate {
            add_field => { "[http][headers][origin]"           => "%{[kibana][req][headers][origin]}" }
          }
        }
        if [kibana][req][headers][content-type] {
          mutate {
            add_field => { "[http][headers][content-type]"      => "%{[kibana][req][headers][content-type]}" }
          }
        }
        mutate {
          remove_field => [
            "[kibana][message]",
            "[kibana][method]",
            "[kibana][pid]",
            "[kibana][req]",
            "[kibana][req][headers]",
            "[kibana][req][headers][accept-encoding]",
            "[kibana][req][headers][accept-language]",
            "[kibana][req][headers][accept]",
            "[kibana][req][headers][connection]",
            "[kibana][req][headers][content-length]",
            "[kibana][req][headers][content-type]",
            "[kibana][req][headers][dnt]",
            "[kibana][req][headers][host]",
            "[kibana][req][headers][kbn-version]",
            "[kibana][req][headers][origin]",
            "[kibana][req][headers][referer]",
            "[kibana][req][headers][user-agent]",
            "[kibana][req][headers][via]",
            "[kibana][req][headers][x-forwarded-for]",
            "[kibana][req][headers][x-forwarded-host]",
            "[kibana][req][headers][x-forwarded-server]",
            "[kibana][req][referer]",
            "[kibana][req][remoteAddress]",
            "[kibana][req][url]",
            "[kibana][req][userAgent]",
            "[kibana][res]",
            "[kibana][res][contentLength]",
            "[kibana][res][responseTime]",
            "[kibana][statusCode]",
            "[kibana][tags]",
            "[kibana][type]",
            "[kibana][@timestamp]"
              ]
        }
      } else if ![@metadata][_ceeParsed] {
        grok {
          overwrite  => [ "[syslog][hostname]", "[syslog][identifier]", "[syslog][pid]" ]
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          remove_field => [ "jsonmsg" ]
          remove_tag => [ "_ceeParseFailure" ]
          tag_on_failure => [ ]
          match => { "original" => [
            "^%{EXTENDED_SYSLOG}$"
          ] }
        }
      }
    }
  }
}
