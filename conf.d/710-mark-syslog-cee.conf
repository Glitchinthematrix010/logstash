filter {
  if [type] == "syslog" or [type] == "cee" {
    if [syslog][identifier] == "anacron"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Job `.+' locked by another anacron - skipping$",
          "^Anacron [.[:alnum:]]+ started on [0-9-]+$",
          "^Anacron started on [0-9-]+$",
          "^Jobs will be executed sequentially$",
          "^Normal exit \([0-9]+ jobs? run\)$",
          "^Will run job `[._[:alnum:]-]+' in [0-9]+ min\.$",
          "^Job `[._[:alnum:]-]+' started$",
          "^Job `[._[:alnum:]-]+' terminated$",
          "^Job `[._[:alnum:]-]+' terminated (\(exit status: [[:digit:]]+\) )?\(mailing output\)$",
          "^Updated timestamp for job `[._[:alnum:]-]+' to [0-9-]+$"
        ] }
      }
    } else if [syslog][identifier] == "auditd"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Audit daemon rotating log files$"
        ] }
      }
    } else if [syslog][identifier] == "chronyd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^Selected source %{HOST_DST}$"
        ] }
      }
    } else if [syslog][identifier] == "CROND" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ "Unknown Message" ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^\(%{USER_SRC}\) CMD \(%{DATA:[cron][cronjob]}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Benign"  ]
        match => { "message" => [
          "^\(root\) CMD \(cd /etc/logstash && curl -so GeoLiteCity\.dat\.new\.gz \"http://geolite\.maxmind\.com/download/geoip/database/GeoLite2-City\.mmdb\.gz\" && gunzip GeoLiteCity\.dat\.new\.gz && mv -f GeoLiteCity\.dat GeoLiteCity\.dat\.old && mv -f GeoLiteCity\.dat\.new GeoLiteCity\.dat\)$",
          "^\(apache\) CMD \(php -f /var/www/html/owncloud/cron\.php\)$",
          "^\(root\) CMD \(/usr/sbin/logrotate /etc/logrotate\.d/libvirtd\)$",
          "^\(root\) CMD \(/usr/lib64/sa/sa1 1 1\)$",
          "^\(root\) CMD \(/usr/lib64/sa/sa2 -A\)$",
          "^\(root\) CMD \(/usr/sbin/raid-check\)$",
          "^\(root\) CMD \(run-parts /etc/cron\.(daily|hourly|mothly|weekly)\)$"
        ] }
      }
    } else if [syslog][identifier] == "crond" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^\(%{DATA}\) (ERROR|RELOAD) \(%{DATA}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Error" ]
        match => { "message" => [
          "^\(%{INT}\) ERROR \(%{DATA:[cron][error]}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign"  ]
        match => { "message" => [
          "^\(\*system\*\) RELOAD \(%{PATH:[cron][cronjob]}\)$"
        ] }
      }
    } else if [syslog][identifier] == "crontab" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\(%{USER_SRC}\) LIST \(%{USER_DST}\)$"
        ] }

      }
    } else if [syslog][identifier] == "dbus" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\[system\] Successfully activated service '%{DATA:[dbus][service]}'$",
          "^\[system\] Activating via systemd: service name='%{DATA:[dbus][service]}' unit='%{DATA:[systemd][unit]}'$"
        ] }
      }
    } else if [syslog][identifier] == "dnf" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Metadata cache (created|refreshed recently)\.$"
        ] }
      }
    } else if [syslog][identifier] == "dnsmasq" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^possible DNS-rebind attack detected: %{IP_SRC}$"
        ] }
      }
    } else if [syslog][identifier] == "dropbear"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Exit before auth: Exited normally$",
          "^Child connection from %{IP_SRC}:%{PORT_SRC}$",
          "^Password auth succeeded for '%{USER_DST}' from %{IP_SRC}:%{PORT_SRC}$",
          "^Exit \(%{USER_DST}\): Exited normally$"
        ] }
      }
    } else if [syslog][identifier] == "java"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] INFO  o\.g\.g\.n\.b\.rest\.auth\.TokenRESTService - User \"%{USER_DST}\" successfully authenticated from %{IP_SRC}\.$",
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] INFO  o\.g\.g\.n\.b\.BasicGuacamoleTunnelServlet - Using HTTP tunnel \(not WebSocket\)\. Performance may be sub-optimal\.$",
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] INFO  o\.g\.g\.net\.basic\.TunnelRequestService - User \"%{USER_DST}\" successfully connected to \".+\"\.$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message"]
        match => { "message" => [
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] WARN  o\.g\.g\.s\.GuacamoleHTTPTunnelServlet - HTTP tunnel request rejected: No such tunnel\.$"
        ] }
      }
    } else if [syslog][identifier] == "logrotate" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^ALERT exited abnormally with \[%{INT}\]$"
        ] }
      }
    } else if [syslog][identifier] == "polkitd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Registered Authentication Agent for unix-process:\d+:\d+ \(system bus name :%{BASE10NUM} \[/usr/bin/pkttyagent --notify-fd %{POSINT} --fallback\], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale [[:lower:]]{2}_[[:upper:]]{2}(\.(UTF-8|.ISO88591))?\)$",
          "^Unregistered Authentication Agent for unix-process:%{POSINT}:%{POSINT} \(system bus name :%{BASE10NUM}, object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale [[:lower:]]{2}_[[:upper:]]{2}(\.(UTF-8|ISO88591))?\) \(disconnected from bus\)$"
        ] }
      }
    } else if [syslog][identifier] =~ /^run-parts(\(.+\))?$/ {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^(\(.+\) )?(finished|starting) (0anacron|curator\.cron|0yum-(daily|hourly|monthly|security)\.cron|0logwatch|logrotate|man-db\.cron|mcelog.cron|mod-pagespeed|mysql-backup|mythtv-update-motd.cron|pam_shield|rhsmd|vdsm-logrotate)$"
        ] }
      }
    } else if [syslog][identifier] == "rhsmd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^In order for Subscription Manager to provide your system with updates, your system must be registered with the Customer Portal\. Please enter your Red Hat login to ensure your system is up-to-date\.$"
        ] }
      }
    } else if [syslog][identifier] == "su" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\(to %{USER_DST}\) %{USER_SRC} on pts/\d+$",
          "^pam_unix\(su-l:session\): session opened for user %{USER_DST} by %{USER_SRC}\(uid=%{UID_SRC}\)$"
        ] }
      }
    }
  }
}
