filter {
  if [type] == "syslog" or [type] == "cee" {
    if [syslog][identifier] == "/firewalld"  {
#      grok {
#        patterns_dir => [ "/etc/logstash/patterns.d/" ]
#        #tag_on_failure => [ ]
#        add_tag => [ "Known Message", "Benign" ]
#        match => { "message" => [
#        ] }
#      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^WARNING: %{WORD}: INVALID_SERVICE: %{DATA}$",
          "^WARNING: COMMAND_FAILED: '/usr/sbin/iptables -w --table %{WORD} --delete %{DATA}' failed:$"
        ] }
      }
    } else if [syslog][identifier] == "abrt-hook-ccpp"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^/var/spool/abrt is %{INT} bytes \(more than %{MEM}\), deleting '%{DATA}'$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^Process %{POSINT} \(%{DATA}\) of user %{UID_SRC} killed by SIG(SEGV|TRAP) - dumping core$"
        ] }
      }
    } else if [syslog][identifier] == "abrt-dump-journal-oops" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^abrt-dump-journal-oops: Creating problem directories$",
          "^abrt-dump-journal-oops: Found oopses: %{INT}$",
          "^Reported %{INT} kernel oopses to Abrt$"
        ] }
      }
    } else if [syslog][identifier] == "abrt-server" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Deleting problem directory %{DATA:[files][dst][filename]} \(dup of %{DATA:[files][src][filename]}\)$",
          "^Kernel package kernel-core-%{DATA} found$",
          "^Looking for kernel package$",
          "^No actions are found for event 'notify'$"
        ] }
      }
    } else if [syslog][identifier] == "acpid"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^%{INT} (client )?rule loaded$",
          "^client connected from %{INT}\[i%{INT}:%{INT}\]$",
          "^exiting$",
          "^starting up$",
          "^waiting for events: event logging is off$"
        ] }
      }
    } else if [syslog][identifier] == "anacron"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Job `.+' locked by another anacron - skipping$",
          "^Anacron [.[:alnum:]]+ started on [0-9-]+$",
          "^Anacron started on [0-9-]+$",
          "^Jobs will be executed sequentially$",
          "^Normal exit \([0-9]+ jobs? run\)$",
          "^Will run job `[._[:alnum:]-]+' in [0-9]+ min\.$",
          "^Job `[._[:alnum:]-]+' started$",
          "^Job `[._[:alnum:]-]+' terminated$",
          "^Job `[._[:alnum:]-]+' terminated (\(exit status: [[:digit:]]+\) )?\(mailing output\)$",
          "^Updated timestamp for job `[._[:alnum:]-]+' to [0-9-]+$"
        ] }
      }
    } else if [syslog][identifier] == "auditd"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^The audit daemon is exiting\.$",
          "^Audit daemon rotating log files$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^Audit daemon is suspending logging due to low disk space\.$"
        ] }
      }
    } else if [syslog][identifier] == "augenrules"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^/sbin/augenrules: No change$",
          "^No rules$",
          "^backlog (0|1)$",
          "^backlog_limit %{POSINT}$",
          "^enabled (0|1)$",
          "^flag 1$",
          "^lost %{INT}$",
          "^pid %{INT}$",
          "^rate_limit %{INT}$"
        ] }
      }
    } else if [syslog][identifier] == "chronyd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Time has been changed$",
          "^Can't synchronise: no selectable sources$",
          "^Forward time jump detected\!$",
          "^Selected source %{HOST_DST}$",
          "^Source %{IP_DST} o(ff|n)line$",
          "^Source %{IP} replaced with %{IP_DST}$"
        ] }
      }
    } else if [syslog][identifier] == "CROND" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ "Unknown Message" ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^\(CRON\) STARTUP \([0-9.]+\)$",
          "^\(%{USER_SRC}\) CMD \(%{DATA:[cron][cronjob]}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Benign"  ]
        match => { "message" => [
          "^\(root\) CMD \(cd /etc/logstash && curl -so GeoLiteCity\.dat\.new\.gz \"http://geolite\.maxmind\.com/download/geoip/database/GeoLite2-City\.mmdb\.gz\" && gunzip GeoLiteCity\.dat\.new\.gz && mv -f GeoLiteCity\.dat GeoLiteCity\.dat\.old && mv -f GeoLiteCity\.dat\.new GeoLiteCity\.dat\)$",
          "^\(apache\) CMD \(php -f /var/www/html/owncloud/cron\.php\)$",
          "^\(root\) CMD \(/usr/sbin/logrotate /etc/logrotate\.d/libvirtd\)$",
          "^\(root\) CMD \(/usr/lib64/sa/sa1 1 1\)$",
          "^\(root\) CMD \(/usr/lib64/sa/sa2 -A\)$",
          "^\(root\) CMD \(/usr/sbin/raid-check\)$",
          "^\(root\) CMD \(run-parts /etc/cron\.(daily|hourly|mothly|weekly)\)$"
        ] }
      }
    } else if [syslog][identifier] == "crond" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^\(%{DATA}\) (ERROR|INFO|RELOAD) \(%{DATA}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Error" ]
        match => { "message" => [
          "^\(%{INT}\) ERROR \(%{DATA:[cron][error]}\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign"  ]
        match => { "message" => [
          "^\(\*system\*\) RELOAD \(%{PATH:[cron][cronjob]}\)$"
        ] }
      }
    } else if [syslog][identifier] == "crontab" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\(%{USER_SRC}\) LIST \(%{USER_DST}\)$"
        ] }

      }
    } else if [syslog][identifier] == "dracut" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^(Arguments: %{DATA}|base|bash|biosdevname|dracut|modules:|dracut-|dracut modules:|dracut-systemd|drm|Early CPIO image|fs-lib|i18n|ifcfg|kdumpbase|kernel-modules|kernel-network-modules|network|nss-softokn|plymouth|qemu|resume|rootfs-block|shutdown|systemd|systemd-initrd|Skipping udev rule: %{DATA}|Stored kernel commandline:|terminfo|udev-rules|usrmount|Version:)$",
          "^=+$",
          "^Executing: /usr/bin/dracut -f /boot/initramfs-%{DATA}$",
          "^Executing: /s?bin/dracut %{GREEDYDATA}$",
          "^Image: /boot/initramfs-%{DATA}*$",
          "^No dracut internal kernel commandline stored in initrd$",
          "^Version: dracut-%{DATA}$",
          "^[bcdlnsp-]([r-][w-][xsStT-]){3}\s+%{INT}\s+%{USERNAME}\s+%{USERNAME}\s+%{INT}(,\s+%{INT})?\s+%{MONTH}\s+%{MONTHDAY}(\s+(%{YEAR}|%{HOUR}:%{MINUTE}))?\s+%{RELATIVEPATH:[files][src][filename]}( -> %{DATA:[files][dst][filename]})?$",
          "^\*\*\* (Construct|Creat|Generat|Hardlink|Includ|Install|Resolv|Stripp)ing %{DATA}\s*\*\*\\*?*$",
          "^\*\*\* Store current command line parameters (done )?\*\*\*$",
          "^dracut module '%{DATA}' will not be installed, because command '%{DATA}' could not be found\!$",
          "^dracut module '%{DATA}' will not be installed\, because it's in the list to be omitted\!$",
          "^dracut-%{DATA}$"
        ] }
      }
    } else if [syslog][identifier] == "dnsmasq" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message" ]
        match => { "message" => [
          "^possible DNS-rebind attack detected: %{IP_SRC}$"
        ] }
      }
    } else if [syslog][identifier] == "dropbear"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Exit before auth: Exited normally$",
          "^Child connection from %{IP_SRC}:%{PORT_SRC}$",
          "^Password auth succeeded for '%{USER_DST}' from %{IP_SRC}:%{PORT_SRC}$",
          "^Exit \(%{USER_DST}\): Exited normally$"
        ] }
      }
    } else if [syslog][identifier] =~ /filebeat$/  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^transport\.go:%{INT}: SSL client failed to connect with: read tcp %{IP_SRC}:%{PORT_SRC}->%{IP_DST}:%{PORT_DST}: (read: connection reset by peer|i/o timeout)$",
          "^transport\.go:%{INT}: SSL client failed to connect with: dial tcp %{IP_DST}:%{PORT_DST}: getsockopt: connection refused$",
          "^Loading config file error: YAML config parsing failed on %{FILENAME_SRC}: %{DATA} Exiting\.$"
        ] }
      }
    } else if [syslog][identifier] == "haveged"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^haveged starting up$",
          "^haveged: AIS-31 continuous procedure B: retry %{INT} bytes fill %{INT}$",
          "^haveged: cpu: \(L4 VC\); data: 32K \(L2 L4 V\); inst: 32K \(L2 L4 V\); idx: %{INT}\/%{INT}; sz: %{INT}\/%{INT}$",
          "^haveged: fills: %{INT}, generated: %{INT}$",
          "^haveged: Stopping due to signal %{INT}$",
          "^haveged: tot tests\(BA8\): A:%{INT}\/%{INT} B:%{INT}\/%{INT} continuous tests\(B\):  last entropy estimate %{BASE10NUM}$",
          "^haveged: ver: [\d.]+; arch: x86; vend: GenuineIntel; build: \(gcc [\d.]+ ITV\); collect: 128K$"
        ] }
      }
    } else if [syslog][identifier] == "java"  {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] INFO  o\.g\.g\.n\.b\.rest\.auth\.TokenRESTService - User \"%{USER_DST}\" successfully authenticated from %{IP_SRC}\.$",
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] INFO  o\.g\.g\.n\.b\.BasicGuacamoleTunnelServlet - Using HTTP tunnel \(not WebSocket\)\. Performance may be sub-optimal\.$",
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] INFO  o\.g\.g\.net\.basic\.TunnelRequestService - User \"%{USER_DST}\" successfully connected to \".+\"\.$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message"]
        match => { "message" => [
          "^%{TIME} \[ajp-apr-8009-exec-\d+\] WARN  o\.g\.g\.s\.GuacamoleHTTPTunnelServlet - HTTP tunnel request rejected: No such tunnel\.$"
        ] }
      }
    } else if [syslog][identifier] == "kill" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^.*$"
        ] }
      }
    } else if [syslog][identifier] == "kdumpctl" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^No kdump initial ramdisk found.$",
          "^Rebuilding /boot/initramfs-.*kdump.img$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^cat: write error: Broken pipe$",
          "^Starting kdump: \[FAILED\]$",
          "^No memory reserved for crash kernel\.$"
        ] }
      }
    } else if [syslog][identifier] == "logrotate" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^ALERT exited abnormally with \[%{INT}\]$"
        ] }
      }
    } else if [syslog][identifier] == "network" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^(Bringing up|Shutting down) (%{INTF_SRC})?interface( %{INTF_SRC})?:  \[  OK  \]$"
        ] }
      }
    } else if [syslog][identifier] == "polkitd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Registered Authentication Agent for unix-process:\d+:\d+ \(system bus name :%{BASE10NUM} \[/usr/bin/pkttyagent --notify-fd %{POSINT} --fallback\], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale [[:lower:]]{2}_[[:upper:]]{2}(\.(UTF-8|.ISO88591))?\)$",
          "^Unregistered Authentication Agent for unix-process:%{POSINT}:%{POSINT} \(system bus name :%{BASE10NUM}, object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale [[:lower:]]{2}_[[:upper:]]{2}(\.(UTF-8|ISO88591))?\) \(disconnected from bus\)$"
        ] }
      }
    } else if [syslog][identifier] == "pulseaudio" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\[pulseaudio\] bluez5-util\.c: GetManagedObjects\(\) failed: org\.freedesktop\.DBus\.Error\.NoReply: Did not receive a reply\. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken\.$",
          "^\[pulseaudio\] pid\.c: Daemon already running\.$",
          "^\[pulseaudio\] pid\.c: Stale PID file, overwriting\.$"
        ] }
      }
    } else if [syslog][identifier] =~ /^run-parts(\(.+\))?$/ {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^(\(.+\) )?(finished|starting) (0anacron|curator\.cron|0yum-(daily|hourly|monthly|security)\.cron|0logwatch|logrotate|man-db\.cron|mcelog.cron|mod-pagespeed|mysql-backup|mythtv-update-motd.cron|pam_shield|rhsmd|vdsm-logrotate)$"
        ] }
      }
    } else if [syslog][identifier] == "rhsmd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^In order for Subscription Manager to provide your system with updates, your system must be registered with the Customer Portal\. Please enter your Red Hat login to ensure your system is up-to-date\.$"
        ] }
      }
    } else if [syslog][identifier] == "rtkit-daemon" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Successfully made thread %{INT} of process %{INT} \(/usr/bin/pulseaudio\) owned by '%{UID_DST}' (high|RT) priority at nice level %{INT}\.$",
          "^Supervising %{INT} threads of %{INT} processes of %{INT} users\.$"

        ] }
      }
    } else if [syslog][identifier] == "runuser" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^pam_unix\(runuser:session\): session closed for user akmods$",
          "^pam_unix\(runuser:session\): session opened for user akmods by \(uid=%{UID_SRC}\)$"
        ] }
      }
    } else if [syslog][identifier] == "su" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\(to %{USER_DST}\) %{USER_SRC} on pts/\d+$",
          "^pam_%{NOTSPACE}\(su-l:session\): session closed for user %{USER_DST}$",
          "^pam_%{NOTSPACE}\(su-l:session\): session opened for user %{USER_DST} by %{USER_SRC}\(uid=%{UID_SRC}\)$"
        ] }
      }
    } else if [syslog][identifier] == "unix_chkpwd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Alert" ]
        match => { "message" => [
          "^password check failed for user \(%{USER_DST}\)$"
        ] }
      }
    } else if [syslog][identifier] == "useradd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        #tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^failed adding user '%{USER_DST}', exit code: %{INT}$"
        ] }
      }
    }
  }
}
