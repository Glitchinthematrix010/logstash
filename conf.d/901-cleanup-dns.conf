# If only hostnames are present, do a reverse lookup to see if we can get an IPv4 and/or IPv6 address.
filter {

  # Check for bad IPs and Hostnames
  if  [host][src][ipv4] {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      add_tag => [ "bad_ipv4_src" ]
      match => { "[host][src][ipv4]" => "^%{IPV4}$" }
      remove_field => [ "[host][src][ipv4]" ]
    }
  }
  if  [host][dst][ipv4] {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ "bad_ipv4_dst" ]
      match => { "[host][dst][ipv4]" => "^%{IPV4}$" }
      remove_field => [ "[host][dst][ipv4]" ]
    }
  }
  if  [host][src][ipv6] {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      add_tag => [ "bad_ipv6_src" ]
      match => { "[host][src][ipv6]" => "^%{IPV6}$" }
      remove_field => [ "[host][src][ipv6]" ]
    }
  }
  if  [host][dst][ipv6] {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      add_tag => [ "bad_ipv6_dst" ]
      match => { "[host][dst][ipv6]" => "^%{IPV6}$" }
      remove_field => [ "[host][dst][ipv6]" ]
    }
  }
  if  [host][src][hostname] {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      add_tag => [ "bad_hostname_dst" ]
      match => { "[host][src][hostname]" => "^(?:%{IPV4}|%{IPV6})$" }
      remove_field => [ "[host][src[hostname]" ]
    }
  }
  if  [host][dst][hostname] {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      add_tag => [ "bad_hostname_dst" ]
      match => { "[host][dst][hostname]" => "^(?:%{IPV4}|%{IPV6})$" }
      remove_field => [ "[host][dst[hostname]" ]
    }
  }

  # Remove empty IP address and hostname fields.
  if [host][dst][ipv4] and [host][dst][ipv4] == "" {
    mutate {
      remove_field => [ "[host][dst][ipv4]" ]
    }
  }
  if [host][src][ipv4] and [host][src][ipv4] == "" {
    mutate {
      remove_field => [ "[host][src][ipv4]" ]
    }
  }
  if [host][dst][ipv6] and [host][dst][ipv6] == "" {
    mutate {
      remove_field => [ "[host][dst][ipv6]" ]
    }
  }
  if [host][src][ipv6] and [host][src][ipv6] == "" {
    mutate {
      remove_field => [ "[host][src][ipv6]" ]
    }
  }
  if [host][src][hostname] and [host][src][hostname] == "" {
    mutate {
      remove_field => [ "[host][src][hostname]" ]
    }
  }
  if [host][dst][hostname] and [host][dst][hostname] == "" {
    mutate {
      remove_field => [ "[host][dst][hostname]" ]
    }
  }


  # Perform lookups on hostnames to try and get an IP address.
  if [host][src][hostname] and ![host][src][ipv4] {
    mutate {
      add_field => { "[@metadata][src]" => "%{[host][src][hostname]}" }
    }
    dns {
      nameserver => [ "127.0.0.1" ]
      action => "replace"
      resolve => [ "[@metadata][src]" ]
    }
    mutate {
      convert => [ "[@metadata][src]", "string" ]
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      match => { "[@metadata][src]" => "^%{IPV4}$" }
      add_field => { "[host][src][ipv4]" => "%{[@metadata][src]}" }
    }
  }
    
  if [host][dst][hostname] and ![host][dst][ipv4]  {
    mutate {
      add_field => { "[@metadata][dst]" => "%{[host][dst][hostname]}" }
    }
    dns {
      nameserver => [ "127.0.0.1" ]
      action => "replace"
      resolve => [ "[@metadata][dst]" ]
    }
    mutate {
      convert => [ "[@metadata][dst]", "string" ]
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d" ]
      tag_on_failure =>  [ ]
      match => { "[@metadata][dst]" => "^%{IPV4}$" }
      add_field => { "[host][dst][ipv4]" => "%{[@metadata][dst]}" }
    }
  }
}
