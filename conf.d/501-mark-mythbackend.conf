filter { 
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] == "mythbackend" { 
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ "Known Message", "Error" ] 
      match => { "message" => [ 
        "^MySQL server has gone away$",
        "^QMYSQL3: Unable to prepare statement$",
        "^Database error was:$"
      ] } 
    } 
    if "Error" not in [tags] {
      grok { 
        patterns_dir => [ "/etc/logstash/patterns.d/" ] 
        tag_on_failure => [ ] 
        add_tag => [ ] 
        overwrite => [ "message"  ] 
        match => { "[@metadata][tmp]" => [ 
          "^%{MYTHTIMESTAMP} %{MYTHLEVEL:[mythtv][level]}  %{GREEDYDATA:message}$"
        ] } 
      } 
      grok { 
        patterns_dir => [ "/etc/logstash/patterns.d/" ] 
        tag_on_failure => [ ] 
        add_tag => [ "Known Message", "Benign" ] 
        match => { "message" => [ 
          "^(Bindings were|Query was):$",
          "^:RECORDEDID=%{INT}",
          "^(Queueing|Running) HouseKeeperTask '(DBCleanup|JobQueueRevoer||RecordedArtworkUpdate|ThemeUpdateNotifications)'\.$",
          "^<Gap start=\"%{TIMESTAMP_ISO8601:[mythtv][recording][start]}\" end=\"%{TIMESTAMP_ISO8601:[mythtv][recording][end]}\" duration=\"%{INT}\" \/>$",
          "^<\/RecordingQuality>$",
          "^Artwork Refresh Complete$",
          "^AutoExpire: CalcParams\(\): Max required Free Space: %{INT} GB w/freq: %{INT} min$",
          "^CetonRTSP: Transport: RTP/AVP;unicast;client_port=%{POSINT}-%{POSINT}$",
          "^Deleting %{POSINT} at %{TIMESTAMP_ISO8601} => %{MYTHTITLE}.  Too many episodes, we only want to keep %{POSINT}.$",
          "^Empty LocalHostName\.$",
          "^Expiring %{POSINT} MB for %{POSINT} at %{TIMESTAMP_ISO8601} => %{MYTHTITLE}:%{MYTHSUBTITLE}$",
          "^Finished recording %{MYTHTITLE} %{MYTHSUBTITLE}: channel %{MYTHCHANNEL}$",
          "^HouseKeeperTask '(DBCleanup|JobQueueRecover|LogClean|RecordedArtworkUpdate|ThemeUpdateNotifications)' Finished Successfully\.$",
          "^IPTVSH\(::-1\): run\(\)$",
          "^Loading themes for [0-9.]+$",
          "^MainServer: PREVIEW_SUCCESS but no receivers\.$",
          "^MainServer::ANN (Monitor|Playback)$", 
          "^MainServer::HandleAnnounce FileTransfer$",
          "^MythBackend exiting$",
          "^New DB connection, total: %{INT}$",
          "^Performing Artwork Refresh: /usr/bin/mythmetadatalookup --refresh-all-artwork  --verbose general --loglevel info$",
          "^ProgramInfo\(\): Failed to find recorded entry for %{INT}\.$",
          "^Qt version: compile: [0-9.]+, runtime: [0-9.]+$",
          "^RecBase\[%{MYTHCARDID}\]\(%{IP_SRC}-RTP\.%{POSINT}\): SetStrOption\(\.\.\.recordingtype\): Option not in profile.$",
          "^Received Terminated: Code %{INT}, PID %{INT}, UID %{INT}, Value %{BASE16NUM}$",
          "^Reschedule requested for CHECK (0|-3) %{MYTHCHANNEL} 0 (DoHandleDelete1|UpdateRecStatus2) | %{MYTHTITLE} | %{MYTHSUBTITLE} | %{MYTHDESCRIPTION} | %{MYTHRECID}$",
          "^Reschedule requested for PLACE PrepareToRecord$",
          "^Scheduled %{POSINT} items in %{INT} = %{INT} match + %{INT} check + %{INT} place$",
          "^Scheduler: Seem to be woken up by USER$",
          "^Starting HouseKeeper\.$",
          "^TVRec\[%{MYTHCARDID}\]: ASK_RECORDING %{POSINT} %{POSINT} %{POSINT} %{POSINT}$",
          "^TVRec\[%{MYTHCARDID}\]: Changing from %{WORD} to %{MYTHRECSTATUS}$",
          "^TVRec\[%{MYTHCARDID}\]: RingBufferChanged\(\)$",
          "^TVRec\[%{MYTHCARDID}\]: TuningFrequency$",
          "^TVRec\[%{MYTHCARDID}\]: rec->GetPathname\(\): '%{MYTHRECFILE}'$",
          "^TVRec\[%{POSINT}\]: HW Tuner: %{POSINT}->%{MYTHCARDID}$",
          "^Tuning recording: %{MYTHTITLE}:%{MYTHSUBTITLE}: channel %{MYTHCHANNEL} on cardid %{MYTHCARDID}, sourceid %{MYTHSRCID}$",
          "^Updating status for %{MYTHTITLE}:%{MYTHSUBTITLE} on cardid %{MYTHCARDID} \(%{WORD} => %{MYTHRECSTATUS}\)$",
          "^adding: %{HOST_SRC} as a client \(events: %{POSINT}\)$",
          "^mythbackend version: %{DATA} www\.mythtv\.org$",
          "^adding: %{HOST_SRC} as a remote file transfer$"
        ] } 
      } 
      grok { 
        patterns_dir => [ "/etc/logstash/patterns.d/" ] 
        tag_on_failure => [ ] 
        add_tag => [ "Known Message", "Error" ] 
        match => { "message" => [ 
          "^MainServer: MainServer::HandleVersion - Client speaks protocol version %{INT} but we speak %{INT}!$",
          "^HouseKeeper: Failed to download %{URI} themes info package\.$",
          "^ServerPool: Host is configured to listen on \[%{IPV6}(%%{INTF_DST})?\], but address is not used on any local network interfaces\.$",
          "^Unable to find IPv6 address to bind$"
        ] } 
      }
    } 
  }
}
