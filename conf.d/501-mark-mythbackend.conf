#2016-06-03 10:09:10.099792 N  AutoExpire: CalcParams(): Max required Free Space: 1.0 GB w/freq: 15 min

filter { 
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] == "mythbackend" { 
    mutate {
      rename => { "message" => "[@metadata][tmp]" }
    }
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ ] 
      match => { "[@metadata][tmp]" => [ 
        "^%{MYTHTIMESTAMP} %{MYTHLEVEL:[mythtv][level]}  %{GREEDYDATA:message}$"
      ] } 
    } 
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ "Known Message", "Benign" ] 
      match => { "message" => [ 
        "^(Queueing|Running) HouseKeeperTask '(DBCleanup|JobQueueRevoer||RecordedArtworkUpdate|ThemeUpdateNotifications)'\.$",
        "^Artwork Refresh Complete$",
        "^AutoExpire: CalcParams\(\): Max required Free Space: %{INT} GB w/freq: %{INT} min$",
        "^CetonRTSP: Transport: RTP/AVP;unicast;client_port=%{POSINT}-%{POSINT}$",
        "^Deleting %{POSINT} at %{TIMESTAMP_ISO8601} => %{MYTHTITLE}.  Too many episodes, we only want to keep %{POSINT}.$",
        "^Expiring %{POSINT} MB for %{POSINT} at %{TIMESTAMP_ISO8601} => %{MYTHTITLE}:%{MYTHSUBTITLE}$",
        "^Finished recording %{MYTHTITLE} %{MYTHSUBTITLE}: channel %{MYTHCHANNEL}$",
        "^HouseKeeperTask '(DBCleanup|JobQueueRecover|LogClean|RecordedArtworkUpdate|ThemeUpdateNotifications)' Finished Successfully\.$",
        "^IPTVSH\(::-1\): run\(\)$",
        "^Loading themes for [0-9.]+$",
        "^MainServer::ANN (Monitor|Playback)$", 
        "^MainServer::HandleAnnounce FileTransfer$",
        "^MainServer: PREVIEW_SUCCESS but no receivers\.$",
        "^New DB connection, total: %{INT}$",
        "^Performing Artwork Refresh: /usr/bin/mythmetadatalookup --refresh-all-artwork  --verbose general --loglevel info$",
        "^RecBase\[%{MYTHCARDID}\]\(%{IP_SRC}-RTP\.%{POSINT}\): SetStrOption\(\.\.\.recordingtype\): Option not in profile.$",
        "^Reschedule requested for PLACE PrepareToRecord$",
        "^Reschedule requested for CHECK (0|-3) %{MYTHCHANNEL} 0 (DoHandleDelete1|UpdateRecStatus2) | %{MYTHTITLE} | %{MYTHSUBTITLE} | %{MYTHDESCRIPTION} | %{MYTHRECID}$",
        "^Scheduled %{POSINT} items in %{INT} = %{INT} match + %{INT} check + %{INT} place$",
        "^Scheduler: Seem to be woken up by USER$",
        "^TVRec\[%{MYTHCARDID}\]: ASK_RECORDING %{POSINT} %{POSINT} %{POSINT} %{POSINT}$",
        "^TVRec\[%{MYTHCARDID}\]: Changing from %{WORD} to %{MYTHRECSTATUS}$",
        "^TVRec\[%{POSINT}\]: HW Tuner: %{POSINT}->%{MYTHCARDID}$",
        "^TVRec\[%{MYTHCARDID}\]: rec->GetPathname\(\): '%{MYTHRECFILE}'$",
        "^Updating status for %{MYTHTITLE}:%{MYTHSUBTITLE} on cardid %{MYTHCARDID} \(%{WORD} => %{MYTHRECSTATUS}\)$",
        "^Tuning recording: %{MYTHTITLE}:%{MYTHSUBTITLE}: channel %{MYTHCHANNEL} on cardid %{MYTHCARDID}, sourceid %{MYTHSRCID}$",
        "^adding: %{HOST_SRC} as a client \(events: %{POSINT}\)$",
        "^adding: %{HOST_SRC} as a remote file transfer$"
      ] } 
    } 
    grok { 
      patterns_dir => [ "/etc/logstash/patterns.d/" ] 
      tag_on_failure => [ ] 
      add_tag => [ "Known Message", "Error" ] 
      match => { "message" => [ 
        "^HouseKeeper: Failed to download %{URI} themes info package\.$"
      ] } 
    } 
  }
}
