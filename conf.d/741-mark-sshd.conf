filter {
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] == "sshd" {
    mutate {
      add_field => { "application" => "sshd" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      add_tag => [ "Benign","Known Message" ]
      tag_on_failure => [ ]
      match => { "message" => [
        "^Accepted password for %{SITE_USERS:[username][dst]} from %{IP_SRC} port %{PORT_SRC} ssh2$",
        "^Accepted publickey for %{SITE_USERS:[username][dst]} from %{IP_SRC} port %{PORT_SRC} ssh2: %{WORD:[sshd][key][format]} %{SSHKEYFP}$",
        "^Connection closed by %{SITE_SERVICE_CHECK_HOST} \[preauth\]$",
        "^Did not receive identification string from %{SITE_SERVICE_CHECK_HOST}$",
        "^GSSAPI (client|server) step %{BASE10NUM}$",
        "^Received disconnect from %{IP_SRC}: %{BASE10NUM}: (Bye Bye|Bye|disconnected by user)?( \[preauth\])?$",
        "^pam_\S+\((su-l|sshd):session\): session closed for user %{USER_DST}$",
        "^pam_\S+\((su-l|sshd):session\): session opened for user %{USER_DST} by (%{USER_SRC})?\(uid=%{BASE10NUM}\)$"
      ] }
    }
    if "Known Message" not in [tags] {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message","Error" ]
        match => { "message" => [
          "^Connection closed by %{IP_SRC}( port %{PORT_SRC})?( \[preauth\])?$",
          "^Did not receive identification string from %{IP_SRC}$",
          "^error: AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys %{USER_SRC} failed, status 1$",
          "^error: AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys returned status 1$",
          "^error: Disabled method \"%{DATA}\" in AuthenticationMethods list \"%{DATA}\"( \[preauth\])?$",
          "^error: Received disconnect from %{IP_SRC}: %{BASE10NUM}: (com.jcraft.jsch.JSchException: Auth fail|java.net.SocketTimeoutException: Read timed out) \[preauth\]$",
          "^fatal: Read from socket failed: Connection reset by peer \[preauth\]$",
          "^fatal: no hostkey alg \[preauth\]$"
        ] }
      }
    }
    if "Benign" not in [tags] {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Alert", "Known Message"]
        match => { "message" => [
          "^Address %{IP_SRC} maps to %{HOST_SRC}, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!$",
          "^Authentication methods list \"%{DATA}\" contains disabled method, skipping( \[preauth\])?$",
          "^Did not receive identification string from %{IP_SRC}$",
          "^Invalid user %{USER_DST} from %{IP_SRC}$",
          "^Protocol major versions differ for %{IP_SRC}: %{DATA} vs\. %{DATA}$",
          "^User %{USER_DST} from %{IP_SRC} not allowed because not listed in AllowUsers$",
          "^input_userauth_request: invalid user %{USER_DST} \[preauth\]$",
          "^reverse mapping checking getaddrinfo for %{HOST_SRC} \[%{IP_SRC}\] failed - POSSIBLE BREAK-IN ATTEMPT!$"
        ] }
      }
    }
  }
}
