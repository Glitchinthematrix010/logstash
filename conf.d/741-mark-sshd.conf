filter {
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] == "sshd" {
    mutate {
      add_field => { "application" => "sshd" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      add_tag => [ "Known Message", "Benign" ]
      tag_on_failure => [ ]
      match => { "message" => [
        "^Authorized to %{SITE_USERS_DST}, krb5 principal %{KRB_PRINC_SRC} \(krb5_kuserok\)$",
        "^Accepted (gssapi-with-mic|password|publickey) for %{SITE_USERS_DST} from %{IP_SRC} port %{PORT_SRC} ssh2(: %{WORD:[sshd][key][format]} %{SSHKEYFP})?$",
        "^Connection closed by %{SITE_SERVICE_CHECK_HOST} port \d+ \[preauth\]$",
        "^Connection closed by %{SITE_SERVICE_CHECK_HOST}( \[preauth\])?$",
        "^Did not receive identification string from %{SITE_SERVICE_CHECK_HOST}$",
        "^Disconnected from %{IP_SRC} port %{PORT_SRC}$",
        "^GSSAPI (client|server) step %{INT}$",
        "^Received disconnect from %{IP_SRC}( port %{PORT_SRC})?: ?%{INT}:%{DATA}$",
        "^Server listening on 0\.0\.0\.0 port 22\.$",
        "^Server listening on :: port 22\.$",
        "^pam_\S+\((su-l|sshd):session\): session closed for user %{SITE_USERS_DST}$",
        "^pam_\S+\((su-l|sshd):session\): session opened for user %{SITE_USERS_DST} by (%{SITE_USERS_SRC})?\(uid=%{INT}\)$",
        "^subsystem request for sftp$"
      ] }
    }
    if "Known Message" not in [tags] {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message","Error" ]
        match => { "message" => [
          "^Bad protocol version identification '%{DATA}' from %{IP_SRC} port %{PORT_SRC}$",
          "^Connection closed by %{IP_SRC}( port %{PORT_SRC})?( \[preauth\])?$",
          "^Did not receive identification string from %{IP_SRC}$",
          "^Disconnecting: Change of username or service not allowed: \(%{DATA},ssh-connection\) -> \(%{DATA},%{DATA} \[preauth\]$",
          "^Failed password for %{USER_DST} from %{IP_SRC} port %{PORT_SRC} ssh2$",
          "^PAM %{INT} more authentication failures?; logname= uid=0 euid=0 tty=ssh ruser= rhost=%{IP_SRC}  user=%{USER_DST}$",
          "^Received signal 15; terminating\.$",
          "^error: AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys %{USER_SRC} failed, status 1$",
          "^error: AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys returned status 1$",
          "^error: Could not load host key: /etc/ssh/%{DATA:[files][src][filename]}$",
          "^error: Disabled method \"%{DATA}\" in AuthenticationMethods list \"%{DATA}\"( \[preauth\])?$",
          "^error: Received disconnect from %{IP_SRC}: %{INT}: (com.jcraft.jsch.JSchException: Auth fail|java.net.SocketTimeoutException: Read timed out) \[preauth\]$",
          "^fatal: Read from socket failed: Connection reset by peer( \[preauth\])?$",
          "^fatal: no hostkey alg \[preauth\]$",
          "^pam_unix\(sshd:auth\): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=%{IP_SRC} user=%{USER_DST}$"
        ] }
      }
    }
    if "Known Message" not in [tags] {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Alert" ]
        match => { "message" => [
          "^Accepted (gssapi-with-mic|password|publickey) for %{USER_DST} from %{IP_SRC} port %{PORT_SRC} ssh%{INT}(: %{WORD:[sshd][key][format]} %{SSHKEYFP})?$",
          "^Address %{IP_SRC} maps to %{HOST_SRC}, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT\!$",
          "^Authentication methods list \"%{DATA}\" contains disabled method, skipping( \[preauth\])?$",
          "^Did not receive identification string from %{IP_SRC}$",
          "^Disconnecting: Too many authentication failures for %{USER_DST} \[preauth\]$",
          "^Invalid user %{DATA:[user][dst][username]} from %{IP_SRC}$",
          "^Protocol major versions differ for %{IP_SRC}: %{DATA} vs\. %{DATA}$",
          "^User %{USER_DST} from %{IP_SRC} not allowed because not listed in AllowUsers$",
          "^input_userauth_request: invalid user %{DATA:[user][dst][username]} \[preauth\]$",
          "^pam_%{DATA}\((su-l|sshd):session\): session closed for user %{USER_DST}$",
          "^pam_%{DATA}\((su-l|sshd):session\): session opened for user %{USER_DST} by (%{USER_SRC})?\(uid=%{INT}\)$",
          "^pam_%{DATA}\(sshd:auth\): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=%{IP_SRC}  user=%{USER_DST}$",
          "^reverse mapping checking getaddrinfo for (%{HOST_SRC}|%{DATA}) \[%{IP_SRC}\] failed - POSSIBLE BREAK-IN ATTEMPT!$"
        ] }
      }
    }
  }
}
