filter {
  if ([type] == "syslog" or [type] == "cee") and [syslog][identifier] == "ns-slapd" {
    grok {
      patterns_dir   => [ "/etc/logstash/patterns.d" ]
      tag_on_failure => [ ]
      add_tag        => [ "Known Message", "Benign" ]
      match          => { "message" => [
          "^GSSAPI server step \d+$"
      ] }
    }
  }
  if [type] == "389-Directory" {
    mutate {
      add_field => { "[syslog][hostname]" => "%{received_from}" }
    }
    if [original] == "" {
      drop { }
    }
    if [source] =~ /access$/ {
      grok {
        patterns_dir   => [ "/etc/logstash/patterns.d" ]
        tag_on_failure => [ ]
        add_field      => { "[@metadata][389dsParsed]" => "True" }
        overwrite      => [ "message", "[@metadata][timestamp]" ]
        match          => { "original" => [
            "^\[%{DS389TIMESTAMP:[@metadata][timestamp]}\] %{DS389EVENT:message}$"
        ] }
      }
      if [@metadata][389dsparams1] {
        kv {
          source      => "[@metadata][389dsparams1]"
          trim        => '\"'
          add_field   => { "[@metadata][389_kv]" => "True" }
          target      => "[389ds][access]" 
        }
      }
      if [@metadata][389dsparams2] {
        kv {
          source      => "[@metadata][389dsparams2]"
          trim        => '\"'
          add_field   => { "[@metadata][389_kv]" => "True" }
          target      => "[389ds][access]" 
        }
      }
      if ![389ds_kv] {
        grok {
          patterns_dir   => [ "/etc/logstash/patterns.d" ]
          tag_on_failure => [ ]
          add_tag        => [ "Known Message", "Benign" ]
          overwrite      => [ "message" ]
          match          => { "original" => [
            "^\s*(?<message>%{HOST_SRC}:%{INT} \(%{PATH}\))$",
            "^\s*(?<message>389-Directory/[0-9.]+ B[0-9.]+)$"
          ] }
        }
        grok {
          patterns_dir   => [ "/etc/logstash/patterns.d" ]
          tag_on_failure => [ ]
          overwrite      => [ "message", "[@metadata][timestamp]" ]
          match          => { "original" => [
            "^\[%{DS389TIMESTAMP:[@metadata][timestamp]}\] %{DATA:message}$"
          ] }
        }
      } else {
        mutate {
          add_tag => [ "Known Message" ]
        }
      }
    }

    if [source] =~ /errors$/ or ( ( [type] == "syslog" or [type] == "cee") and [syslog][identifier] == "ns-slapd" ) {
      grok {
        patterns_dir   => [ "/etc/logstash/patterns.d" ]
        tag_on_failure => [ ]
        overwrite      => [ "message", "[@metadata][timestamp]" ]
        match          => { "original" => [
          "^\s*(?<message>%{HOST_SRC}:%{INT} \(%{PATH}\))$",
          "^\s*(?<message>389-Directory/[0-9.]+ B[0-9.]+)$",
          "^\[%{DS389TIMESTAMP:[@metadata][timestamp]}\] %{DATA:message}$"
        ] }
      }
      grok {
        patterns_dir   => [ "/etc/logstash/patterns.d" ]
        tag_on_failure => [ ]
        add_tag        => [ "Known Message", "Error" ]
        match          => { "message" => [
          "^- Entry \"%{DATA}\" -- attribute \"%{DATA}\" not allowed$",
          "^- Operation error fetching Null DN \([a-f0-9-]+\), error %{INT}\.$",
          "^NSMMReplicationPlugin - agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\): Replication bind with (GSSAPI|SIMPLE) auth failed: %{DATA:[389ds][error]}$",
          "^NSMMReplicationPlugin - agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\): The remote replica has a different database generation ID than the local database\.  You may have to reinitialize the remote replica, or the local replica\.$",
          "^NSMMReplicationPlugin - agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\): Unable to receive the response for a startReplication extended operation to consumer \(Can\'t contact LDAP server\)\. Will retry later\.$",
          "^NSMMReplicationPlugin - conn=%{INT} op=%{INT} replica=\"%{DATA}\": Unable to acquire replica: error: %{DATA:[389ds][error]$",
          "^attrlist_replace - attr_replace \(%{DATA}\) failed\.$",
          "^repl_version_plugin_recv_acquire_cb - \[file %{DATA}, line %{INT}\]: Incompatible IPA versions, pausing replication. This server: \"%{INT}\" remote server: \"(%{INT}|\(null\))\"\.$",
          "^slapi_ldap_(sasl_interactive_)?bind - Error: %{DATA:[389ds][error]}$"
        ] }
      }
      grok {
        patterns_dir   => [ "/etc/logstash/patterns.d" ]
        tag_on_failure => [ ]
        add_tag        => [ "Known Message", "Benign" ]
        match          => { "message" => [
          "^NSMMReplicationPlugin - Beginning total update of replica \"agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\)\".$",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Cleaning local ruv\'s\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Sending cleanAllRUV task to all the replicas\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Successfully cleaned rid\(%INT\)\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Waiting for all the replicas to (be cleaned|finish cleaning|receive all the deleted replica updates)\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Cleaning local ruv\'s\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Cleaning rid \(%{INT}\)\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Found maxcsn \(%{BASE16NUM}\) $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Initiating CleanAllRUV Task\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Replica is not cleaned yet \(agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\)\) $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Replicas have not been cleaned yet, retrying in %{INT} seconds $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Retrieving maxcsn\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Sending cleanAllRUV task to all the replicas\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Successfully cleaned rid\(%{INT}\)\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Waiting for all the replicas to be (cleaned|online|finish cleaning|receive all the deleted replica updates)\.\.\. $",
          "^NSMMReplicationPlugin - CleanAllRUV Task \(rid %{INT}\): Waiting to process all the updates from the deleted replica\.\.\. $",
          "^NSMMReplicationPlugin - Finished total update of replica \"agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\)\"\. Sent %{INT} entries\.$",
          "^NSMMReplicationPlugin - agmt=\"cn=(meTo|masterAgreement)%{DATA}\" \(%{HOSTNAME}:%{INT}\): Replication bind with (GSSAPI|SIMPLE) auth resumed$",
          "^NSMMReplicationPlugin - agmt_delete: begin$"
        ] }
      }
    }
    date {
      match    => [ "[@metadata][timestamp]" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      timezone => "UTC"
    }
  }
}
          #"^slapd_ldap_sasl_interactive_bind - Error: could not perform interactive bind for id \[\] mech \[(GSSAPI|SIMPLE)\]: %{DATA:[389ds][error]}$",
          #"^slapi_ldap_bind - Error: could not bind id \[%{DATA}\] authentication mechanism \[(GSSAPI|SIMPLE)\]: %{DATA:[389ds][error]}$",
          #"^slapi_ldap_bind - Error: could not perform interactive bind for id \[\] authentication mechanism \[(GSSAPI|SIMPLE)\]: %{DATA:[389ds][error]}$",
          #"^slapi_ldap_bind - Error: could not send startTLS request: %{GREEDYDATA:[389ds][error]}$"
